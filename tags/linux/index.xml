<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on Lionel Blog</title><link>https://hybridego.github.io/tags/linux/</link><description>Recent content in Linux on Lionel Blog</description><generator>Hugo</generator><language>ko-kr</language><lastBuildDate>Wed, 09 Jul 2025 15:13:23 +0900</lastBuildDate><atom:link href="https://hybridego.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Use do-while Loops in Shell Scripts</title><link>https://hybridego.github.io/2025/07/04/How_to_use_do_while_in_shell/</link><pubDate>Wed, 09 Jul 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/07/04/How_to_use_do_while_in_shell/</guid><description>&lt;h1 id="how-to-use-do-while-loops-in-shell-scripts">How to Use do-while Loops in Shell Scripts&lt;/h1>
&lt;h2 id="practical-examples-of-infinite-loops-in-bash">Practical Examples of Infinite Loops in Bash&lt;/h2>
&lt;h3 id="bash에서-do-while-패턴을-사용하여-무한-루프를-구현하고-시스템-정보를-주기적으로-확인하는-방법을-소개합니다">Bash에서 do-while 패턴을 사용하여 무한 루프를 구현하고, 시스템 정보를 주기적으로 확인하는 방법을 소개합니다.&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">while&lt;/span> true; &lt;span style="color:#ff79c6">do&lt;/span> cat /sys/devices/platform/f01d0000.adc/iio:device0/in_voltage3_raw; sleep 1; &lt;span style="color:#ff79c6">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">while&lt;/span> true; &lt;span style="color:#ff79c6">do&lt;/span> cat /sys/devices/platform/f01d0000.adc/iio:device0/in_voltage3_raw; &lt;span style="color:#ff79c6">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">while&lt;/span> true; &lt;span style="color:#ff79c6">do&lt;/span> free -h; sleep 1; &lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;---&amp;#34;&lt;/span>; &lt;span style="color:#ff79c6">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>How to Check the C++ Version in Use</title><link>https://hybridego.github.io/2025/07/04/Cpp_version_check/</link><pubDate>Wed, 09 Jul 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/07/04/Cpp_version_check/</guid><description>&lt;h1 id="c-표준-버전-확인하기">C++ 표준 버전 확인하기&lt;/h1>
&lt;pre>&lt;code>g++ -std=c++14 -E -dM -x c++ /dev/null | grep '__cplusplus'
&lt;/code>&lt;/pre>
&lt;p>이 명령은 g++ 컴파일러가 인식하는 C++ 표준 버전을 확인하는 명령입니다. 각 옵션의 역할은 다음과 같습니다:&lt;/p>
&lt;ul>
&lt;li>g++: GNU C++ 컴파일러를 실행합니다.&lt;/li>
&lt;li>-std=c++14: C++14 표준을 사용하도록 지정합니다. 다른 버전(c++11, c++17 등)으로 변경할 수 있습니다.&lt;/li>
&lt;li>-E: 전처리 단계만 수행하고 결과를 출력합니다. 컴파일 과정은 생략됩니다.&lt;/li>
&lt;li>-dM: 전처리된 출력에서 매크로 정의만 포함하도록 지정합니다.&lt;/li>
&lt;li>-x c++: 입력 파일의 종류를 C++ 소스 코드로 간주합니다.&lt;/li>
&lt;li>/dev/null: 실제 소스 코드 파일 대신 null 디바이스를 사용합니다. 이는 컴파일러 자체에서 정의된 매크로를 확인하기 위함입니다.&lt;/li>
&lt;li>| grep &amp;lsquo;__cplusplus&amp;rsquo;: 전처리된 출력에서 __cplusplus 매크로를 검색하여 출력합니다.&lt;/li>
&lt;/ul>
&lt;p>__cplusplus 매크로는 컴파일러가 지원하는 C++ 표준 버전을 나타냅니다. 예를 들어, 출력이 201703L이면 C++17 표준을 지원함을 의미합니다.&lt;/p></description></item><item><title>High-Performance I/O in Unix Systems</title><link>https://hybridego.github.io/2025/07/04/High-Performance-IO-in-Unix-Systems/</link><pubDate>Fri, 04 Jul 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/07/04/High-Performance-IO-in-Unix-Systems/</guid><description>&lt;h1 id="고성능-io를-위한-유닉스-시스템-호출-가이드">고성능 I/O를 위한 유닉스 시스템 호출 가이드&lt;/h1>
&lt;p>유닉스 계열 운영 체제(리눅스, BSD 등)에서 고성능 I/O 작업은 대용량 데이터 전송, 네트워크 서버, 데이터 스트리밍 등에서 필수적입니다. 이번 포스팅에서는 &lt;code>readv()&lt;/code>, &lt;code>writev()&lt;/code>, &lt;code>splice()&lt;/code>, &lt;code>sendfile()&lt;/code>, &lt;code>funopen()&lt;/code>, &lt;code>sendmsg()&lt;/code>, &lt;code>io_uring&lt;/code>, 그리고 &lt;code>shm_open&lt;/code> 같은 함수들의 기능과 사용 예시를 정리하며, 리눅스와 BSD에서의 차이점을 살펴봅니다.&lt;/p></description></item><item><title>Buildroot Package version up</title><link>https://hybridego.github.io/2025/07/04/Buildroot-package-version-up/</link><pubDate>Fri, 04 Jul 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/07/04/Buildroot-package-version-up/</guid><description>&lt;h1 id="buildroot-version-변경하는-방법">buildroot version 변경하는 방법&lt;/h1>
&lt;pre tabindex="0">&lt;code>make nt98567_buildroot_defconfig
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>make clean
make &amp;lt;패키지이름&amp;gt;-rebuild
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>패키지의 소스코드를 수정했다면, 캐시를 지우고 빌드해야 합니다&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>make &amp;lt;패키지이름&amp;gt;-dirclean
make &amp;lt;패키지이름&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>packagename.mk 에 다음과 같이 써있으면 host 설정에 따르는 것임&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>$(eval $(virtual-package))
$(eval $(host-virtual-package))
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;strong>host package 의 버전 확인하기&lt;/strong>&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>pkg-config --modversion zlib
&lt;/code>&lt;/pre>&lt;h1 id="sha256-hash값-구하기">sha256 hash값 구하기&lt;/h1>
&lt;pre tabindex="0">&lt;code>sha256sum 파일이름
&lt;/code>&lt;/pre></description></item><item><title>linux 에서 시스템 Buff and Cache 비우기</title><link>https://hybridego.github.io/2025/07/02/Empty-Buff-Cache/</link><pubDate>Wed, 02 Jul 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/07/02/Empty-Buff-Cache/</guid><description>&lt;h1 id="linux-에서-시스템-buff-and-cache-비우기">linux 에서 시스템 Buff and Cache 비우기&lt;/h1>
&lt;ul>
&lt;li>/proc/sys/vm/drop_caches 사용
리눅스 커널은 /proc/sys/vm/drop_caches 파일을 통해 캐시를 강제로 비울 수 있는 인터페이스를 제공합니다. 이 방법을 사용하려면 &lt;strong>루트 권한&lt;/strong>이 필요합니다.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code># 캐시 비우기 (페이지 캐시만 비움)
echo 1 | tee /proc/sys/vm/drop_caches

# 덴트리(dentries)와 아이노드(inode) 캐시 비우기
echo 2 | tee /proc/sys/vm/drop_caches

# 페이지 캐시, 덴트리, 아이노드 모두 비우기 (가장 강력)
echo 3 | tee /proc/sys/vm/drop_caches
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>강제로 비우는 대신, 큰 메모리를 사용하는 프로그램(예: stress 도구)을 실행해 시스템이 자연스럽게 buff/cache를 비우도록 유도할 수도 있습니다.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>sudo apt install stress # 설치 (Ubuntu/Debian 기준)
stress --vm 1 --vm-bytes 200G # 200GB 메모리 사용 시뮬레이션
&lt;/code>&lt;/pre></description></item><item><title>linux debugging</title><link>https://hybridego.github.io/2025/05/23/Linux_debugging_skil/</link><pubDate>Fri, 23 May 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/05/23/Linux_debugging_skil/</guid><description>&lt;h1 id="리눅스-환경에서의-메모리-디버깅-스킬">리눅스 환경에서의 메모리 디버깅 스킬&lt;/h1>
&lt;p>이 교육 자료는 리눅스 환경에서 메모리 관련 문제를 디버깅하는 데 필요한 핵심 개념과 도구를 다룹니다. 페이지, 페이지 폴트, 신호(SIGSEGV, SIGBUS), 댕글링 포인터, &lt;code>/proc&lt;/code> 파일, OOM Killer, Shadow Memory, LD_PRELOAD, RAII를 기반으로 디버깅 스킬을 정리했습니다.&lt;/p></description></item></channel></rss>