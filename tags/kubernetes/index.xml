<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubernetes on Lionel Blog</title><link>https://hybridego.github.io/tags/kubernetes/</link><description>Recent content in Kubernetes on Lionel Blog</description><generator>Hugo</generator><language>ko-kr</language><lastBuildDate>Wed, 23 May 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://hybridego.github.io/tags/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>Istio 사이드카 자동 주입 원리</title><link>https://hybridego.github.io/2018/05/23/istio-auto-injection-with-webhook/</link><pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/05/23/istio-auto-injection-with-webhook/</guid><description>&lt;h2 id="서론"&gt;서론&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Kubernetes 1.9 버전은 Admission Webhook(웹 콜백) 확장 메커니즘을 도입했습니다. 웹훅을 통해 개발자는 Kubernetes API 서버의 기능을 매우 유연하게 확장하여 API 서버가 리소스를 생성할 때 리소스를 검증하거나 수정할 수 있습니다.&lt;/p&gt;
&lt;p&gt;웹훅 사용의 장점은 API 서버의 소스 코드를 수정하고 다시 컴파일할 필요 없이 기능을 확장할 수 있다는 것입니다. 삽입된 로직은 독립적인 웹 프로세스로 구현되며, 매개변수 방식으로 Kubernetes에 전달되어 Kubernetes가 자체 로직을 처리할 때 확장 로직을 콜백합니다.&lt;/p&gt;
&lt;p&gt;Istio 0.7 버전은 Kubernetes 웹훅을 활용하여 사이드카 자동 주입을 구현했습니다.&lt;/p&gt;</description></item><item><title>Helm을 사용하여 Kubernetes에 배포하는 방법</title><link>https://hybridego.github.io/2018/04/16/using-helm-to-deploy-to-kubernetes/</link><pubDate>Mon, 16 Apr 2018 10:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/04/16/using-helm-to-deploy-to-kubernetes/</guid><description>&lt;h2 id="helm이란"&gt;Helm이란?&lt;/h2&gt;
&lt;p&gt;Helm은 Kubernetes 애플리케이션을 관리하는 도구입니다. Helm은 Kubernetes 애플리케이션을 패키징하고 배포하는 데 사용됩니다. Helm은 Kubernetes 애플리케이션을 쉽게 설치, 업그레이드, 롤백할 수 있도록 도와줍니다.&lt;/p&gt;</description></item><item><title>Kubernetes 클러스터 외부에서 애플리케이션에 접근하는 방법은 무엇인가요?</title><link>https://hybridego.github.io/2017/11/28/access-application-from-outside/</link><pubDate>Tue, 28 Nov 2017 12:00:00 +0000</pubDate><guid>https://hybridego.github.io/2017/11/28/access-application-from-outside/</guid><description>&lt;h2 id="서론"&gt;서론&lt;/h2&gt;
&lt;p&gt;Kubernetes의 클러스터 네트워크는 사설 네트워크에 속하며, 배포된 애플리케이션은 클러스터 네트워크 내부에서만 접근할 수 있다는 것을 알고 있습니다. 그렇다면 Kubernetes 클러스터의 애플리케이션을 외부 네트워크에 노출하여 외부 사용자에게 서비스를 제공하는 방법은 무엇일까요? 이 글에서는 외부 네트워크에서 Kubernetes 클러스터의 애플리케이션에 접근하는 몇 가지 구현 방식을 탐구합니다.&lt;/p&gt;</description></item></channel></rss>