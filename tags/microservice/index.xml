<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Microservice on Lionel Blog</title><link>https://hybridego.github.io/tags/microservice/</link><description>Recent content in Microservice on Lionel Blog</description><generator>Hugo</generator><language>ko-kr</language><lastBuildDate>Wed, 23 May 2018 18:00:00 +0000</lastBuildDate><atom:link href="https://hybridego.github.io/tags/microservice/index.xml" rel="self" type="application/rss+xml"/><item><title>마이크로서비스 보안 성찰록 3부</title><link>https://hybridego.github.io/2018/05/23/external_system_auth/</link><pubDate>Wed, 23 May 2018 18:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/05/23/external_system_auth/</guid><description>&lt;h2 id="외부-시스템-접근-제어">외부 시스템 접근 제어&lt;/h2>
&lt;p>사용자 접근 및 마이크로서비스 간 상호 접근 외에도, 외부 타사 시스템도 시스템 내부의 마이크로서비스에 접근해야 할 수 있습니다. 예를 들어 이전 블로그의 온라인 상점 예시에서, 외부 추천 서비스가 상점의 상품 카탈로그 정보를 얻기 위해 시스템에 연결해야 할 수 있습니다. 내부 서비스 간의 접근과 비교하여 외부 시스템의 접근은 엄격한 보안 제어가 필요합니다.&lt;/p></description></item><item><title>마이크로서비스 보안 성찰록 2부</title><link>https://hybridego.github.io/2018/05/23/service_2_service_auth/</link><pubDate>Wed, 23 May 2018 15:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/05/23/service_2_service_auth/</guid><description>&lt;h2 id="서비스-간-인증-및-권한-부여">서비스 간 인증 및 권한 부여&lt;/h2>
&lt;p>사용자로부터의 접근 요청 외에도, 마이크로서비스 애플리케이션 내의 각 마이크로서비스는 서로 많은 접근을 합니다. 다음 시나리오를 포함합니다.&lt;/p>
&lt;ul>
&lt;li>사용자 간접적으로 트리거되는 마이크로서비스 간 상호 접근&lt;BR>
예를 들어 온라인 상점 애플리케이션에서 사용자가 장바구니 마이크로서비스에 접근하여 결제할 때, 장바구니 마이크로서비스는 사용자 등급 마이크로서비스에 접근하여 사용자의 회원 등급을 얻어 사용자가 받을 수 있는 쇼핑 할인을 확인해야 할 수 있습니다.&lt;/li>
&lt;li>사용자 트리거가 아닌 마이크로서비스 간 상호 접근&lt;BR>
예를 들어 데이터 동기화 또는 백그라운드 정기 작업으로 인한 마이크로서비스 간 상호 접근.&lt;/li>
&lt;/ul>
&lt;p>애플리케이션 시스템의 데이터 민감도에 따라 시스템 내 마이크로서비스 간 상호 접근에 대해 다른 보안 요구 사항이 있을 수 있습니다.&lt;/p></description></item><item><title>마이크로서비스 보안 성찰록 1부</title><link>https://hybridego.github.io/2018/05/22/user_authentication_authorization/</link><pubDate>Wed, 23 May 2018 10:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/05/22/user_authentication_authorization/</guid><description>&lt;blockquote>
&lt;p>최근 마이크로서비스 보안 관련 기존 아이디어를 추가로 요약하고 정리하여, 이전 글에서 명확하지 않았던 부분, 예를 들어 서비스 간 인증 및 권한 부여, 서비스 호출 체인에서 사용자 신원 전달 등을 명확히 했습니다.&lt;/p></description></item><item><title>Service Mesh 和 API Gateway的关系探讨（译文）</title><link>https://hybridego.github.io/2018/04/11/service-mesh-vs-api-gateway/</link><pubDate>Wed, 11 Apr 2018 09:32:00 +0000</pubDate><guid>https://hybridego.github.io/2018/04/11/service-mesh-vs-api-gateway/</guid><description>&lt;h2 id="service-mesh-vs-api-gateway">Service Mesh vs API Gateway&lt;/h2>
&lt;p>在&lt;a href="https://medium.com/microservices-in-practice/service-mesh-for-microservices-2953109a3c9a">前一篇关于Service Mesh的文章&lt;/a>中,我提到了几个关于Service Mesh和API Gateway之间关系的问题，在本篇文章中，我打算就Service Mesh和API Gateway的用途进行进一步讨论。&lt;/p></description></item><item><title>마이크로서비스 아키텍처의 인프라: 서비스 메시와 Istio에 대해 이야기하다</title><link>https://hybridego.github.io/2018/03/29/what-is-service-mesh-and-istio/</link><pubDate>Thu, 29 Mar 2018 12:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/03/29/what-is-service-mesh-and-istio/</guid><description>&lt;h2 id="마이크로서비스-아키텍처의-진화">마이크로서비스 아키텍처의 진화&lt;/h2>
&lt;p>아키텍처 패턴으로서 마이크로서비스는 복잡한 시스템을 수십에서 수백 개의 작은 서비스로 분할하며, 각 서비스는 독립적인 비즈니스 로직을 구현합니다. 이러한 작은 서비스는 소규모 소프트웨어 엔지니어링 팀이 이해하고 수정하기 쉽고, 언어 및 프레임워크 선택의 유연성을 제공하며, 애플리케이션 개발 및 출시 시간을 단축하고, 다양한 워크로드 및 리소스 요구 사항에 따라 서비스를 독립적으로 확장/축소할 수 있는 이점을 제공합니다.&lt;/p>
&lt;p>반면에 애플리케이션이 여러 마이크로서비스 프로세스로 분할되면 프로세스 내 메서드 호출이 프로세스 간 원격 호출로 변경됩니다. 이는 수많은 서비스의 연결, 관리 및 모니터링의 복잡성을 야기합니다.&lt;/p></description></item><item><title>안전한 마이크로서비스 애플리케이션을 구축하는 방법은?</title><link>https://hybridego.github.io/2018/05/22/user_authentication_authorization/</link><pubDate>Sat, 03 Feb 2018 12:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/05/22/user_authentication_authorization/</guid><description>&lt;h2 id="서론">서론&lt;/h2>
&lt;p>마이크로서비스 아키텍처의 도입은 소프트웨어 애플리케이션에 많은 이점을 가져다주었습니다: 소규모 개발팀, 개발 주기 단축, 언어 선택의 유연성, 서비스 확장성 향상 등. 동시에 분산 시스템의 복잡한 문제들도 함께 도입되었습니다. 그중 하나의 과제는 마이크로서비스 아키텍처에서 유연하고 안전하며 효율적인 인증 및 권한 부여 방안을 구현하는 것입니다. 이 글에서는 이 문제에 대해 비교적 완전한 논의를 시도할 것입니다.&lt;/p></description></item></channel></rss>