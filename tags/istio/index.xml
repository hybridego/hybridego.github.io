<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Istio on Lionel Blog</title><link>https://hybridego.github.io/tags/istio/</link><description>Recent content in Istio on Lionel Blog</description><generator>Hugo</generator><language>ko-kr</language><lastBuildDate>Mon, 04 Jun 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://hybridego.github.io/tags/istio/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to Istio v1alpha3 Routing API</title><link>https://hybridego.github.io/2018/06/04/introducing-the-istio-v1alpha3-routing-api/</link><pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/06/04/introducing-the-istio-v1alpha3-routing-api/</guid><description>&lt;p>So far, Istio has provided a simple API for traffic management, which includes four resources: RouteRule, DestinationPolicy, EgressRule, and Ingress (which directly uses Kubernetes&amp;rsquo; Ingress resource). With this API, users can easily manage traffic within the Istio service mesh. The API allows users to route requests to specific versions of a service, inject delays and failures for resilience testing, add timeouts and circuit breakers, and more—all without having to modify the application code itself.&lt;/p></description></item><item><title>Istio 0.8 Release发布</title><link>https://hybridego.github.io/2018/06/02/istio08/</link><pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/06/02/istio08/</guid><description>&lt;blockquote>
&lt;p>在6月1日这一天的早上，Istio社区宣布发布0.8 Release，除了常规的故障修复和性能改进外，这个儿童节礼物里面还有什么值得期待内容呢？让我们来看一看：&lt;/p>&lt;/blockquote></description></item><item><title>Istio Sidecar自动注入原理</title><link>https://hybridego.github.io/2018/05/23/istio-auto-injection-with-webhook/</link><pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/05/23/istio-auto-injection-with-webhook/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;hr>
&lt;p>Kubernets 1.9版本引入了Admission Webhook(web 回调)扩展机制，通过Webhook,开发者可以非常灵活地对Kubernets API Server的功能进行扩展，在API Server创建资源时对资源进行验证或者修改。&lt;/p>
&lt;p>使用webhook的优势是不需要对API Server的源码进行修改和重新编译就可以扩展其功能。插入的逻辑实现为一个独立的web进程，通过参数方式传入到kubernets中，由kubernets在进行自身逻辑处理时对扩展逻辑进行回调。&lt;/p>
&lt;p>Istio 0.7版本就利用了Kubernets webhook实现了sidecar的自动注入。&lt;/p></description></item><item><title>谈谈微服务架构中的基础设施：Service Mesh与Istio</title><link>https://hybridego.github.io/2018/03/29/what-is-service-mesh-and-istio/</link><pubDate>Thu, 29 Mar 2018 12:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/03/29/what-is-service-mesh-and-istio/</guid><description>&lt;h2 id="微服务架构的演进">微服务架构的演进&lt;/h2>
&lt;p>作为一种架构模式，微服务将复杂系统切分为数十乃至上百个小服务，每个服务负责实现一个独立的业务逻辑。这些小服务易于被小型的软件工程师团队所理解和修改，并带来了语言和框架选择灵活性，缩短应用开发上线时间，可根据不同的工作负载和资源要求对服务进行独立缩扩容等优势。&lt;/p>
&lt;p>另一方面，当应用被拆分为多个微服务进程后，进程内的方法调用变成了了进程间的远程调用。引入了对大量服务的连接、管理和监控的复杂性。&lt;/p></description></item><item><title>Nginx开源Service Mesh组件Nginmesh安装指南</title><link>https://hybridego.github.io/2018/01/02/nginmesh-install/</link><pubDate>Tue, 02 Jan 2018 12:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/01/02/nginmesh-install/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>Nginmesh是NGINX的Service Mesh开源项目，用于Istio服务网格平台中的数据面代理。它旨在提供七层负载均衡和服务路由功能，与Istio集成作为sidecar部署，并将以“标准，可靠和安全的方式”使得服务间通信更容易。Nginmesh在今年底已经连续发布了0.2和0.3版本，提供了服务发现，请求转发，路由规则，性能指标收集等功能。&lt;/p></description></item><item><title>Istio를 이용한 카나리 릴리스(Canary Release) 구현</title><link>https://hybridego.github.io/2017/11/08/istio-canary-release-ko/</link><pubDate>Wed, 08 Nov 2017 15:00:00 +0000</pubDate><guid>https://hybridego.github.io/2017/11/08/istio-canary-release-ko/</guid><description>&lt;h2 id="카나리-릴리스canary-release-소개">카나리 릴리스(Canary Release) 소개&lt;/h2>
&lt;p>애플리케이션이 출시된 후, 운영팀이 직면하는 큰 과제 중 하나는 기존 서비스에 영향을 주지 않으면서 업그레이드를 수행하는 방법입니다. 제품을 개발해 본 사람이라면 누구나 알겠지만, 출시 전에 아무리 완벽한 자동화 및 수동 테스트를 거쳤더라도 출시 후에는 크고 작은 문제가 발생하기 마련입니다. 머피의 법칙에 따르면, 잘못될 수 있는 버전 릴리스는 반드시 잘못됩니다.&lt;/p></description></item><item><title>Istio를 사용하여 애플리케이션 트래픽 전환 구현</title><link>https://hybridego.github.io/2017/11/07/istio-traffic-shifting/</link><pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2017/11/07/istio-traffic-shifting/</guid><description>&lt;p>Istio에 대한 더 많은 내용은 &lt;a href="http://istio.doczh.cn/">Istio 중국어 문서&lt;/a>를 참조하십시오.&lt;/p>
&lt;p>원문은 &lt;a href="https://istio.io/docs/tasks/traffic-management/traffic-shifting.html">Traffic Shifting&lt;/a>을 참조하십시오.&lt;/p>
&lt;p>이 작업은 애플리케이션 트래픽을 이전 버전의 서비스에서 새 버전으로 점진적으로 마이그레이션하는 방법을 보여줍니다. Istio를 통해 다양한 가중치 규칙(10%, 20%, ··· 100%)을 사용하여 트래픽을 이전 버전 서비스에서 새 버전 서비스로 원활하게 마이그레이션할 수 있습니다.&lt;/p></description></item><item><title>Istio 및 Bookinfo 예제 프로그램 설치 및 사용 후기</title><link>https://hybridego.github.io/2017/11/04/istio-install_and_example/</link><pubDate>Sat, 04 Nov 2017 12:00:00 +0000</pubDate><guid>https://hybridego.github.io/2017/11/04/istio-install_and_example/</guid><description>&lt;h2 id="서비스-메시-소개">서비스 메시 소개&lt;/h2>
&lt;p>&lt;strong>서비스 메시&lt;/strong>(Service Mesh)는 마이크로서비스 통신 및 관리를 해결하기 위해 등장한 &lt;strong>아키텍처 패턴&lt;/strong>입니다.&lt;/p>
&lt;p>서비스 메시는 서비스 간 통신 및 관련 관리 제어 기능을 비즈니스 프로그램에서 인프라 계층으로 이동시켜 비즈니스 로직과 서비스 통신이라는 두 가지 관심사를 완전히 분리합니다. 서비스 메시를 채택하면 애플리케이션 개발자는 애플리케이션 비즈니스 로직에만 집중하고 구현하면 됩니다. 서비스 간 통신(서비스 검색, 통신 신뢰성, 통신 보안, 서비스 라우팅 등)은 서비스 메시 계층에서 처리하며 애플리케이션에 투명하게 제공됩니다.&lt;/p></description></item></channel></rss>