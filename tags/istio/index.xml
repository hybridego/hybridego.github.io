<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Istio on Lionel Blog</title><link>https://hybridego.github.io/tags/istio/</link><description>Recent content in Istio on Lionel Blog</description><generator>Hugo</generator><language>ko-kr</language><lastBuildDate>Mon, 04 Jun 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://hybridego.github.io/tags/istio/index.xml" rel="self" type="application/rss+xml"/><item><title>Istio v1alpha3 라우팅 API 소개</title><link>https://hybridego.github.io/2018/06/04/introducing-the-istio-v1alpha3-routing-api/</link><pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/06/04/introducing-the-istio-v1alpha3-routing-api/</guid><description>&lt;p&gt;지금까지 Istio는 RouteRule, DestinationPolicy, EgressRule, Ingress(Kubernetes의 Ingress 리소스를 직접 사용)의 네 가지 리소스를 포함하는 간단한 트래픽 관리 API를 제공했습니다. 이 API를 통해 사용자는 Istio 서비스 메시 내에서 트래픽을 쉽게 관리할 수 있습니다. 이 API를 통해 사용자는 요청을 특정 서비스 버전으로 라우팅하고, 복원력 테스트를 위해 지연 및 오류를 주입하고, 타임아웃 및 회로 차단기를 추가하는 등 애플리케이션 코드를 수정할 필요 없이 모든 작업을 수행할 수 있습니다.&lt;/p&gt;</description></item><item><title>Istio 0.8 릴리스 발표</title><link>https://hybridego.github.io/2018/06/02/istio08/</link><pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/06/02/istio08/</guid><description>&lt;blockquote&gt;
&lt;p&gt;6월 1일 아침, Istio 커뮤니티는 0.8 릴리스를 발표했습니다. 일반적인 버그 수정 및 성능 개선 외에, 이 어린이날 선물에는 어떤 기대할 만한 내용이 있을까요? 함께 살펴보겠습니다.&lt;/p&gt;&lt;/blockquote&gt;</description></item><item><title>Istio 사이드카 자동 주입 원리</title><link>https://hybridego.github.io/2018/05/23/istio-auto-injection-with-webhook/</link><pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/05/23/istio-auto-injection-with-webhook/</guid><description>&lt;h2 id="서론"&gt;서론&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Kubernetes 1.9 버전은 Admission Webhook(웹 콜백) 확장 메커니즘을 도입했습니다. 웹훅을 통해 개발자는 Kubernetes API 서버의 기능을 매우 유연하게 확장하여 API 서버가 리소스를 생성할 때 리소스를 검증하거나 수정할 수 있습니다.&lt;/p&gt;
&lt;p&gt;웹훅 사용의 장점은 API 서버의 소스 코드를 수정하고 다시 컴파일할 필요 없이 기능을 확장할 수 있다는 것입니다. 삽입된 로직은 독립적인 웹 프로세스로 구현되며, 매개변수 방식으로 Kubernetes에 전달되어 Kubernetes가 자체 로직을 처리할 때 확장 로직을 콜백합니다.&lt;/p&gt;
&lt;p&gt;Istio 0.7 버전은 Kubernetes 웹훅을 활용하여 사이드카 자동 주입을 구현했습니다.&lt;/p&gt;</description></item><item><title>마이크로서비스 아키텍처의 인프라: 서비스 메시와 Istio에 대해 이야기하다</title><link>https://hybridego.github.io/2018/03/29/what-is-service-mesh-and-istio/</link><pubDate>Thu, 29 Mar 2018 12:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/03/29/what-is-service-mesh-and-istio/</guid><description>&lt;h2 id="마이크로서비스-아키텍처의-진화"&gt;마이크로서비스 아키텍처의 진화&lt;/h2&gt;
&lt;p&gt;아키텍처 패턴으로서 마이크로서비스는 복잡한 시스템을 수십에서 수백 개의 작은 서비스로 분할하며, 각 서비스는 독립적인 비즈니스 로직을 구현합니다. 이러한 작은 서비스는 소규모 소프트웨어 엔지니어링 팀이 이해하고 수정하기 쉽고, 언어 및 프레임워크 선택의 유연성을 제공하며, 애플리케이션 개발 및 출시 시간을 단축하고, 다양한 워크로드 및 리소스 요구 사항에 따라 서비스를 독립적으로 확장/축소할 수 있는 이점을 제공합니다.&lt;/p&gt;
&lt;p&gt;반면에 애플리케이션이 여러 마이크로서비스 프로세스로 분할되면 프로세스 내 메서드 호출이 프로세스 간 원격 호출로 변경됩니다. 이는 수많은 서비스의 연결, 관리 및 모니터링의 복잡성을 야기합니다.&lt;/p&gt;</description></item><item><title>Nginx 오픈소스 서비스 메시 컴포넌트 Nginmesh 설치 가이드</title><link>https://hybridego.github.io/2018/01/02/nginmesh-install/</link><pubDate>Tue, 02 Jan 2018 12:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/01/02/nginmesh-install/</guid><description>&lt;h2 id="서문"&gt;서문&lt;/h2&gt;
&lt;p&gt;Nginmesh는 Istio 서비스 메시 플랫폼의 데이터 플레인 프록시로 사용되는 NGINX의 오픈소스 서비스 메시 프로젝트입니다. 이는 7계층 로드 밸런싱 및 서비스 라우팅 기능을 제공하며, Istio와 사이드카로 통합되어 &amp;lsquo;표준적이고 안정적이며 안전한 방식&amp;rsquo;으로 서비스 간 통신을 용이하게 하는 것을 목표로 합니다. Nginmesh는 연말에 0.2 및 0.3 버전을 연속으로 출시하여 서비스 디스커버리, 요청 전달, 라우팅 규칙, 성능 지표 수집 등의 기능을 제공합니다.&lt;/p&gt;</description></item><item><title>Istio를 이용한 카나리 릴리스(Canary Release) 구현</title><link>https://hybridego.github.io/2017/11/08/istio-canary-release-ko/</link><pubDate>Wed, 08 Nov 2017 15:00:00 +0000</pubDate><guid>https://hybridego.github.io/2017/11/08/istio-canary-release-ko/</guid><description>&lt;h2 id="카나리-릴리스canary-release-소개"&gt;카나리 릴리스(Canary Release) 소개&lt;/h2&gt;
&lt;p&gt;애플리케이션이 출시된 후, 운영팀이 직면하는 큰 과제 중 하나는 기존 서비스에 영향을 주지 않으면서 업그레이드를 수행하는 방법입니다. 제품을 개발해 본 사람이라면 누구나 알겠지만, 출시 전에 아무리 완벽한 자동화 및 수동 테스트를 거쳤더라도 출시 후에는 크고 작은 문제가 발생하기 마련입니다. 머피의 법칙에 따르면, 잘못될 수 있는 버전 릴리스는 반드시 잘못됩니다.&lt;/p&gt;</description></item><item><title>Istio를 사용하여 애플리케이션 트래픽 전환 구현</title><link>https://hybridego.github.io/2017/11/07/istio-traffic-shifting/</link><pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2017/11/07/istio-traffic-shifting/</guid><description>&lt;p&gt;Istio에 대한 더 많은 내용은 &lt;a href="http://istio.doczh.cn/"&gt;Istio 중국어 문서&lt;/a&gt;를 참조하십시오.&lt;/p&gt;
&lt;p&gt;원문은 &lt;a href="https://istio.io/docs/tasks/traffic-management/traffic-shifting.html"&gt;Traffic Shifting&lt;/a&gt;을 참조하십시오.&lt;/p&gt;
&lt;p&gt;이 작업은 애플리케이션 트래픽을 이전 버전의 서비스에서 새 버전으로 점진적으로 마이그레이션하는 방법을 보여줍니다. Istio를 통해 다양한 가중치 규칙(10%, 20%, ··· 100%)을 사용하여 트래픽을 이전 버전 서비스에서 새 버전 서비스로 원활하게 마이그레이션할 수 있습니다.&lt;/p&gt;</description></item><item><title>Istio 및 Bookinfo 예제 프로그램 설치 및 사용 후기</title><link>https://hybridego.github.io/2017/11/04/istio-install_and_example/</link><pubDate>Sat, 04 Nov 2017 12:00:00 +0000</pubDate><guid>https://hybridego.github.io/2017/11/04/istio-install_and_example/</guid><description>&lt;h2 id="서비스-메시-소개"&gt;서비스 메시 소개&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;서비스 메시&lt;/strong&gt;(Service Mesh)는 마이크로서비스 통신 및 관리를 해결하기 위해 등장한 &lt;strong&gt;아키텍처 패턴&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;p&gt;서비스 메시는 서비스 간 통신 및 관련 관리 제어 기능을 비즈니스 프로그램에서 인프라 계층으로 이동시켜 비즈니스 로직과 서비스 통신이라는 두 가지 관심사를 완전히 분리합니다. 서비스 메시를 채택하면 애플리케이션 개발자는 애플리케이션 비즈니스 로직에만 집중하고 구현하면 됩니다. 서비스 간 통신(서비스 검색, 통신 신뢰성, 통신 보안, 서비스 라우팅 등)은 서비스 메시 계층에서 처리하며 애플리케이션에 투명하게 제공됩니다.&lt;/p&gt;</description></item></channel></rss>