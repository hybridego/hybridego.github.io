<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lionel Blog</title><link>https://hybridego.github.io/</link><description>Recent content on Lionel Blog</description><generator>Hugo</generator><language>ko-kr</language><lastBuildDate>Wed, 02 Jul 2025 15:35:23 +0900</lastBuildDate><atom:link href="https://hybridego.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>linux 에서 시스템 Buff and Cache 비우기</title><link>https://hybridego.github.io/2025/07/02/Empty-Buff-Cache-%EB%B9%84%EC%9A%B0%EA%B8%B0/</link><pubDate>Wed, 02 Jul 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/07/02/Empty-Buff-Cache-%EB%B9%84%EC%9A%B0%EA%B8%B0/</guid><description>&lt;ul>
&lt;li>/proc/sys/vm/drop_caches 사용
리눅스 커널은 /proc/sys/vm/drop_caches 파일을 통해 캐시를 강제로 비울 수 있는 인터페이스를 제공합니다. 이 방법을 사용하려면 &lt;strong>루트 권한&lt;/strong>이 필요합니다.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code># 캐시 비우기 (페이지 캐시만 비움)
echo 1 | tee /proc/sys/vm/drop_caches

# 덴트리(dentries)와 아이노드(inode) 캐시 비우기
echo 2 | tee /proc/sys/vm/drop_caches

# 페이지 캐시, 덴트리, 아이노드 모두 비우기 (가장 강력)
echo 3 | tee /proc/sys/vm/drop_caches
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>강제로 비우는 대신, 큰 메모리를 사용하는 프로그램(예: stress 도구)을 실행해 시스템이 자연스럽게 buff/cache를 비우도록 유도할 수도 있습니다.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>sudo apt install stress # 설치 (Ubuntu/Debian 기준)
stress --vm 1 --vm-bytes 200G # 200GB 메모리 사용 시뮬레이션
&lt;/code>&lt;/pre></description></item><item><title>vscode remoteSSH용 docker 생성</title><link>https://hybridego.github.io/2025/06/18/VSCode-RemoteSSH-Docker/</link><pubDate>Wed, 18 Jun 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/06/18/VSCode-RemoteSSH-Docker/</guid><description>&lt;ol>
&lt;li>
&lt;p>사용자에게 docker 권한 부여하기&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo usermod -aG docker &lt;span style="color:#8be9fd;font-style:italic">$USER&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>newgrp docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Dockerfile 작성&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">FROM&lt;/span>&lt;span style="color:#f1fa8c"> ubuntu:24.04&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># Install required packages for minimal build environment and requested tools&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">RUN&lt;/span> apt-get update &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> apt-get install -y &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> build-essential &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> cmake &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> clang-tidy &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> git &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> vim &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> sudo &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> zsh &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> openssh-server &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> locales &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> apt-get clean &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> rm -rf /var/lib/apt/lists/*
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># Configure locale&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">RUN&lt;/span> locale-gen en_US.UTF-8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">ENV&lt;/span> LANG en_US.UTF-8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">ENV&lt;/span> LANGUAGE en_US:en
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">ENV&lt;/span> LC_ALL en_US.UTF-8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># Create user and group (여기에서 1016 은 기존 서버의 userid 번호를 써줍니다.)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">RUN&lt;/span> groupadd -g &lt;span style="color:#bd93f9">1016&lt;/span> lionelj &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> useradd -u &lt;span style="color:#bd93f9">1016&lt;/span> -g &lt;span style="color:#bd93f9">1016&lt;/span> -m -s /bin/zsh lionelj &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> usermod -aG sudo lionelj
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># Configure SSH&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">RUN&lt;/span> ssh-keygen -A &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> chmod &lt;span style="color:#bd93f9">600&lt;/span> /etc/ssh/ssh_host_* &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> chown root:root /etc/ssh/ssh_host_* &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> mkdir -p /var/run/sshd &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> chmod &lt;span style="color:#bd93f9">0755&lt;/span> /var/run/sshd &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;lionelj ALL=(ALL) NOPASSWD:ALL&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/sudoers.d/lionelj &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> chmod &lt;span style="color:#bd93f9">0440&lt;/span> /etc/sudoers.d/lionelj &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> sed -i &lt;span style="color:#f1fa8c">&amp;#39;s/#Port 22/Port 2222/&amp;#39;&lt;/span> /etc/ssh/sshd_config &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;PasswordAuthentication yes&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/ssh/sshd_config &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;lionelj:qwer&amp;#39;&lt;/span> | chpasswd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># Expose SSH port&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">EXPOSE&lt;/span>&lt;span style="color:#f1fa8c"> 2222&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># Start SSH server in background and keep container running&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">RUN&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;#!/bin/bash\n\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c"> sudo /usr/sbin/sshd\n\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c"> if [ $? -ne 0 ]; then\n\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c"> echo &amp;#34;Failed to start sshd&amp;#34;\n\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c"> exit 1\n\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c"> fi\n\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c"> tail -f /dev/null&amp;#39;&lt;/span> &amp;gt; /start.sh &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f1fa8c">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f1fa8c">&lt;/span> chmod +x /start.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">CMD&lt;/span> [&lt;span style="color:#f1fa8c">&amp;#34;/start.sh&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>docker build&lt;/p></description></item><item><title>Unicast, Broadcast, Multicast, SubnetMask</title><link>https://hybridego.github.io/2025/06/13/Unicast_Broadcast_Multicast_SubnetMask/</link><pubDate>Fri, 13 Jun 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/06/13/Unicast_Broadcast_Multicast_SubnetMask/</guid><description>&lt;h1 id="유니캐스트-브로드캐스트-멀티캐스트와-서브넷-마스크">유니캐스트, 브로드캐스트, 멀티캐스트와 서브넷 마스크&lt;/h1>
&lt;h2 id="1-유니캐스트와-멀티캐스트의-차이">1. 유니캐스트와 멀티캐스트의 차이&lt;/h2>
&lt;p>&lt;strong>유니캐스트(Unicast)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>1:1 통신 방식&lt;/strong>으로, 한 송신자가 한 수신자에게만 데이터를 전송합니다.&lt;/li>
&lt;li>예시: 웹서핑, 이메일 등 대부분의 인터넷 통신&lt;/li>
&lt;li>&lt;strong>장점:&lt;/strong> 신뢰성 있는 전송이 가능&lt;/li>
&lt;li>&lt;strong>단점:&lt;/strong> 여러 수신자에게 같은 데이터를 보내려면 각각 개별로 전송해야 하므로 네트워크 트래픽이 증가할 수 있음&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>멀티캐스트(Multicast)&lt;/strong>&lt;/p></description></item><item><title>SNMP</title><link>https://hybridego.github.io/2025/06/13/SNMP/</link><pubDate>Fri, 13 Jun 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/06/13/SNMP/</guid><description>&lt;h2 id="1-snmp-프로토콜로-할-수-있는-것은">1. SNMP 프로토콜로 할 수 있는 것은?&lt;/h2>
&lt;p>SNMP(Simple Network Management Protocol) 프로토콜을 사용하면 네트워크 관리자가 중앙에서 다양한 네트워크 장치(라우터, 스위치, 서버, 프린터 등)를 효과적으로 모니터링하고 관리할 수 있습니다. 구체적으로 SNMP로 할 수 있는 주요 기능은 다음과 같습니다.&lt;/p></description></item><item><title>Hugo install</title><link>https://hybridego.github.io/2025/06/13/Unicast_Broadcast_Multicast_SubnetMask/</link><pubDate>Fri, 13 Jun 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/06/13/Unicast_Broadcast_Multicast_SubnetMask/</guid><description>&lt;ol>
&lt;li>
&lt;p>hugo 설치
&lt;code>winget install Hugo.Hugo.Extended&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>hugo uninstall
&lt;code>winget uninstall --name &amp;quot;Hugo (Extended)&amp;quot;&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>site 만들기&lt;/p>
&lt;pre tabindex="0">&lt;code>PS D:\dev&amp;gt; hugo new site hybridego_playground
Congratulations! Your new Hugo site was created in D:\dev\hybridego_playground.

Just a few more steps...

1. Change the current directory to D:\dev\hybridego_playground.
2. Create or install a theme:
 - Create a new theme with the command &amp;#34;hugo new theme &amp;lt;THEMENAME&amp;gt;&amp;#34;
 - Or, install a theme from https://themes.gohugo.io/
1. Edit hugo.toml, setting the &amp;#34;theme&amp;#34; property to the theme name.
2. Create new content with the command &amp;#34;hugo new content &amp;lt;SECTIONNAME&amp;gt;\&amp;lt;FILENAME&amp;gt;.&amp;lt;FORMAT&amp;gt;&amp;#34;.
3. Start the embedded web server with the command &amp;#34;hugo server --buildDrafts&amp;#34;.

See documentation at https://gohugo.io/.
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>git 설정 및 테마 설정&lt;/p></description></item><item><title>Cargo troubleshooting</title><link>https://hybridego.github.io/2025/05/26/Cargo_troubleshooting/</link><pubDate>Mon, 26 May 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/05/26/Cargo_troubleshooting/</guid><description>&lt;h2 id="cargo-install-troubleshooting">Cargo install troubleshooting&lt;/h2>
&lt;p>cargo로 뭐 설치하려고 할 때&lt;/p>
&lt;pre tabindex="0">&lt;code>PS D:\dev\rust&amp;gt; rustup update
info: syncing channel updates for &amp;#39;stable-x86_64-pc-windows-msvc&amp;#39;
info: checking for self-update

 stable-x86_64-pc-windows-msvc unchanged - rustc 1.87.0 (17067e9ac 2025-05-09)

info: cleaning up downloads &amp;amp; tmp directories
PS D:\dev\rust&amp;gt; cargo install create-tauri-app --locked
 Updating crates.io index
warning: spurious network error (3 tries remaining): [35] SSL connect error (schannel: next InitializeSecurityContext failed: CRYPT_E_NO_REVOCATION_CHECK (0x80092012))
warning: spurious network error (2 tries remaining): [35] SSL connect error (schannel: next InitializeSecurityContext failed: CRYPT_E_NO_REVOCATION_CHECK (0x80092012))
warning: spurious network error (1 tries remaining): [35] SSL connect error (schannel: next InitializeSecurityContext failed: CRYPT_E_NO_REVOCATION_CHECK (0x80092012))
error: download of config.json failed

Caused by:
 failed to download from `https://index.crates.io/config.json`

Caused by:
 [35] SSL connect error (schannel: next InitializeSecurityContext failed: CRYPT_E_NO_REVOCATION_CHECK (0x80092012))
&lt;/code>&lt;/pre>&lt;p>이런 에러가 발생한다면&lt;/p></description></item><item><title>Dioxus vs Tauri</title><link>https://hybridego.github.io/2025/05/26/Dioxus_vs_Tauri/</link><pubDate>Mon, 26 May 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/05/26/Dioxus_vs_Tauri/</guid><description>&lt;h1 id="dioxus와-tauri-비교">Dioxus와 Tauri 비교&lt;/h1>
&lt;h2 id="dioxus란">Dioxus란?&lt;/h2>
&lt;p>Dioxus는 Rust로 작성된 풀스택 UI 프레임워크로, React와 유사한 선언적 프로그래밍 모델을 제공합니다. 웹, 데스크톱, 모바일, 서버사이드 렌더링(SSR), LiveView 등 다양한 플랫폼을 단일 코드베이스로 지원합니다. Rust의 메모리 안전성과 성능을 활용하여 빠르고 안정적인 애플리케이션을 개발할 수 있도록 설계되었습니다. Dioxus는 가상 DOM(Virtual DOM)을 사용하여 UI를 효율적으로 관리하며, React의 컴포넌트 기반 아키텍처와 유사한 개발 경험을 제공합니다. 또한, HTML과 CSS를 적극 활용하며, Tailwind CSS와 같은 외부 CSS 라이브러리와의 통합도 지원합니다. 모바일 지원은 Tauri의 Tao와 Wry 라이브러리를 활용하며, 특히 데스크톱과 웹에서 강력한 성능을 발휘합니다.&lt;a href="https://dioxuslabs.com/blog/introducing-dioxus/">&lt;/a>&lt;a href="https://www.syntax-stories.com/2024/12/dioxus-framework.html">&lt;/a>&lt;/p></description></item><item><title>linux debugging</title><link>https://hybridego.github.io/2025/05/23/Linux_debugging_skil/</link><pubDate>Fri, 23 May 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/05/23/Linux_debugging_skil/</guid><description>&lt;h1 id="리눅스-환경에서의-메모리-디버깅-스킬">리눅스 환경에서의 메모리 디버깅 스킬&lt;/h1>
&lt;p>이 교육 자료는 리눅스 환경에서 메모리 관련 문제를 디버깅하는 데 필요한 핵심 개념과 도구를 다룹니다. 페이지, 페이지 폴트, 신호(SIGSEGV, SIGBUS), 댕글링 포인터, &lt;code>/proc&lt;/code> 파일, OOM Killer, Shadow Memory, LD_PRELOAD, RAII를 기반으로 디버깅 스킬을 정리했습니다.&lt;/p></description></item><item><title>Docker SSH tunneling</title><link>https://hybridego.github.io/2025/05/21/Docker_SSH_tunneling/</link><pubDate>Wed, 21 May 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/05/21/Docker_SSH_tunneling/</guid><description>&lt;h2 id="docker-와-ssh-터널링-설정">Docker 와 ssh 터널링 설정&lt;/h2>
&lt;ol>
&lt;li>처음 실행 (필요한 디렉토리 mount 하고 이미지와 shell 선택, user 지정)&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code class="language-base" data-lang="base">docker run -it \
 -v /home/lionelj:/home/lionelj \
 --name lj-ubuntu \
 -v /opt:/opt \
 ubuntu:24.04 \
 /bin/bash
&lt;/code>&lt;/pre>&lt;ol start="2">
&lt;li>Docker 에서 필요한 기본 설정&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt-get update 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apt-get install -y sudo 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apt-get install -y vim git zsh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>groupadd -g &lt;span style="color:#bd93f9">1016&lt;/span> lionelj 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>useradd -u &lt;span style="color:#bd93f9">1016&lt;/span> -g &lt;span style="color:#bd93f9">1016&lt;/span> -m -s /bin/zsh lionelj
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>usermod -aG sudo lionelj &lt;span style="color:#6272a4">#사용자를 sudo 그룹에 추가. -a: 기존 그룹을 유지하면서 추가. -G sudo: sudo 그룹에 추가.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get install -y locales
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo locale-gen en_US.UTF-8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>다음부터는 만들어진 container로 접속&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># container name으로 접속&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker start lj-ubuntu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># container id로 접속&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker start 708d99e6c6b9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># start 후 shell로 접속&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker &lt;span style="color:#8be9fd;font-style:italic">exec&lt;/span> -it lj-ubuntu /bin/bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>컨테이너를 이미지로 만들기 (이렇게 하면 누적된 image를 다 유지해야 함. 중간 image 삭제 불가)&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker commit &amp;lt;컨테이너_ID&amp;gt; my-ubuntu:custom
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># ex)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker commit 7a613f013271 lionel-ubuntu:custom
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sha256:ec1a4af2f69aa0b7b9366279979d80b0cce02ffd2b3f1e07f81ded54875f7666
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker images
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>REPOSITORY TAG IMAGE ID CREATED SIZE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lionel-ubuntu custom ec1a4af2f69a &lt;span style="color:#bd93f9">6&lt;/span> seconds ago 235MB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ubuntu 24.04 602eb6fb314b &lt;span style="color:#bd93f9">2&lt;/span> weeks ago 78.1MB
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>새로 만든 이미지로 컨테이너 띄우기&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>$ docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
lionel-ubuntu 24.04 fa9ec891a58d 24 seconds ago 235MB
ubuntu 24.04 602eb6fb314b 2 weeks ago 78.1MB

docker run -it \
 -v /home/lionelj:/home/lionelj \
 --name lj-ubuntu \
 -v /opt:/opt \
 lionel-ubuntu:24.04 \
 /bin/bash
&lt;/code>&lt;/pre>&lt;ol start="6">
&lt;li>ssh 설정 (container에 접속해서 sshd를 띄운다.)&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir /run/sshd 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/sbin/sshd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># 컨테이너는 기본적으로 systemd를 사용하지 않으므로, systemctl 대신 직접 sshd를 실행.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="7">
&lt;li>ip 설정 (host 에서 docker container의 ip를 확인한다. ssh 터널링 설정을 해야 하기 때문)&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>$ ip addr
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1
 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
 inet 127.0.0.1/8 scope host lo
 valid_lft forever preferred_lft forever
1839: eth0@if1840: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state UP group default
 link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0
 inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0 &amp;lt;&amp;lt;== 이 번호를 확인.
 valid_lft forever preferred_lft forever
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>또 다른 ip 확인 방법 (host에서)&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>$ docker inspect 85d05024ca50 | grep IPAddress
 &amp;#34;SecondaryIPAddresses&amp;#34;: null,
 &amp;#34;IPAddress&amp;#34;: &amp;#34;172.17.0.2&amp;#34;,
 &amp;#34;IPAddress&amp;#34;: &amp;#34;172.17.0.2&amp;#34;,
&lt;/code>&lt;/pre>&lt;ol start="8">
&lt;li>컨테이너 중지 및 삭제 후 포트 매핑 포함하여 재실행&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>docker run -it --name lj-ubuntu \
 -v /home/lionelj:/home/lionelj \
 -v /opt:/opt \
 --user 1016:1016 \
 -p 2222:2222 \
 lj-ubuntu-3:24.04 \
 /bin/bash
&lt;/code>&lt;/pre>&lt;ol start="9">
&lt;li>이미지 이름 바꾸는 방법&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker tag 원래_이미지_이름:태그 새_이미지_이름:태그
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker rmi 원래_이미지_이름:태그
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>접속 하는 방법 ssh 터널링 (윈도우에서 설정.)&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>ssh -L 2222:172.17.0.2:2222 lionelj@&amp;lt;호스트_IP&amp;gt;
ssh -L 2222:172.17.0.2:2222 lionelj@192.168.85.15
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Windows ssh 설정&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>C:\Users\lionel.j\.ssh\config 파일을 열고

Host lj-ubuntu
  HostName localhost
  User lionelj
  Port 2222

이렇게 추가 후
vscode 에서 Remote-SSH: Connect to Host...로 lj-ubuntu 로 접속.
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="다음부터-사용할-때는-이렇게">다음부터 사용할 때는 이렇게&lt;/h2>
&lt;p>다 설정하면 이렇게 하면 됨.&lt;/p></description></item><item><title>Python uv</title><link>https://hybridego.github.io/2025/05/16/Python_uv/</link><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/05/16/Python_uv/</guid><description>&lt;h1 id="python-uv-사용법">Python UV 사용법&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>회사에서 uv python install 잘 안될 때
사용 중인 네트워크(예: 회사 네트워크)가 Zscaler, Cisco Umbrella 같은 프록시를 통해 SSL 검사를 수행하고 있을 가능성이 높습니다. 이 경우, 프록시가 중간에 자체 인증서를 삽입하여 uv가 사용하는 기본 인증서 저장소(Mozilla의 webpki-roots)에서 이를 신뢰하지 못해 UnknownIssuer 에러가 발생합니다.&lt;/p></description></item><item><title>Clean White Theme for Hugo</title><link>https://hybridego.github.io/post/readme/</link><pubDate>Wed, 09 Jan 2019 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/post/readme/</guid><description>&lt;h1 id="clean-white-theme-for-hugo">Clean White Theme for Hugo&lt;/h1>
&lt;p>CleanWhite is a clean, elegant, but fully functional blog theme for Hugo. Here is a live &lt;a href="https://zhaohuabing.com">demo site&lt;/a> using this theme.&lt;/p>
&lt;p>It is based on &lt;a href="https://github.com/Huxpro/huxpro.github.io">huxblog Jekyll Theme&lt;/a>
and &lt;a href="https://github.com/BlackrockDigital/startbootstrap-clean-blog-jekyll">Clean Blog Jekyll Theme&lt;/a>.&lt;/p>
&lt;p>These two upstream projects have done awesome jobs to create a blog theme, what I&amp;rsquo;m doing here is porting it to Hugo, of which I like the simplicity and the much faster compiling speed. Some other features which I think could be useful, such as site search with algolia and proxy for Disqus access in China, have also been built in the CleanWhite theme. Other fancy features of upstream projects are not supported by this Hugo theme, I&amp;rsquo;d like to make it as simple as possible and only focus on blog purpose, at least for now.
While I created this theme, I followed the Hugo theme best practice and tried to make every part of the template as a replaceable partial html, so it could be much easier for you to make your customization based on it.&lt;/p></description></item><item><title>Introduction to Istio v1alpha3 Routing API</title><link>https://hybridego.github.io/2018/06/04/introducing-the-istio-v1alpha3-routing-api/</link><pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/06/04/introducing-the-istio-v1alpha3-routing-api/</guid><description>&lt;p>So far, Istio has provided a simple API for traffic management, which includes four resources: RouteRule, DestinationPolicy, EgressRule, and Ingress (which directly uses Kubernetes&amp;rsquo; Ingress resource). With this API, users can easily manage traffic within the Istio service mesh. The API allows users to route requests to specific versions of a service, inject delays and failures for resilience testing, add timeouts and circuit breakers, and more—all without having to modify the application code itself.&lt;/p></description></item><item><title>Istio 0.8 Release发布</title><link>https://hybridego.github.io/2018/06/02/istio08/</link><pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/06/02/istio08/</guid><description>&lt;blockquote>
&lt;p>在6月1日这一天的早上，Istio社区宣布发布0.8 Release，除了常规的故障修复和性能改进外，这个儿童节礼物里面还有什么值得期待内容呢？让我们来看一看：&lt;/p>&lt;/blockquote></description></item><item><title>Everything about Setting Up My Ubuntu Desktop</title><link>https://hybridego.github.io/2018/05/24/set_up_my_ubuntu_desktop/</link><pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/05/24/set_up_my_ubuntu_desktop/</guid><description>&lt;h2 id="generate-ssh-key-pair">Generate SSH Key Pair&lt;/h2>
&lt;pre tabindex="0">&lt;code>ssh-keygen -C &amp;#34;zhaohuabing@gmail.com&amp;#34;
&lt;/code>&lt;/pre>&lt;h2 id="shadowsocks">Shadowsocks&lt;/h2>
&lt;p>Install shadowsokcs&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo apt-get install python3-pip

sudo pip3 install shadowsocks
&lt;/code>&lt;/pre>&lt;p>Create config at &lt;code>config/shadowsocks.json&lt;/code>, with the following content:&lt;/p>
&lt;pre tabindex="0">&lt;code>{
	&amp;#34;server&amp;#34;:&amp;#34;remote-shadowsocks-server-ip-addr&amp;#34;,
	&amp;#34;server_port&amp;#34;:443,
	&amp;#34;local_address&amp;#34;:&amp;#34;127.0.0.1&amp;#34;,
	&amp;#34;local_port&amp;#34;:1080,
	&amp;#34;password&amp;#34;:&amp;#34;your-passwd&amp;#34;,
	&amp;#34;timeout&amp;#34;:300,
	&amp;#34;method&amp;#34;:&amp;#34;aes-256-cfb&amp;#34;,
	&amp;#34;fast_open&amp;#34;:false,
	&amp;#34;workers&amp;#34;:1
}
&lt;/code>&lt;/pre>&lt;p>Start a local socks proxy&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo sslocal -c config/shadowsocks.json -d start
&lt;/code>&lt;/pre>&lt;p>In case there is an openssl error, modify shadowsocks source file.&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo vi /usr/local/lib/python3.6/dist-packages/shadowsocks/crypto/openssl.py 

:%s/cleanup/reset/gc
&lt;/code>&lt;/pre>&lt;p>Convert shadowsocks socks proxy to http proxy&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo apt-get install polipo

echo &amp;#34;socksParentProxy = localhost:1080&amp;#34; | sudo tee -a /etc/polipo/config 
sudo service polipo restart
&lt;/code>&lt;/pre>&lt;p>Http proxy now is available at port 8123&lt;/p></description></item><item><title>微服务安全沉思录之三</title><link>https://hybridego.github.io/2018/05/23/external_system_auth/</link><pubDate>Wed, 23 May 2018 18:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/05/23/external_system_auth/</guid><description>&lt;h2 id="外部系统访问控制">外部系统访问控制&lt;/h2>
&lt;p>除用户访问和微服务之间的相互访问外，外部的第三方系统也可能需要访问系统内部的微服务。例如在上一篇博客的网上商店例子中，外部的推荐服务可能需要接入系统，以获取商店的商品目录信息。相对于内部服务之间的访问而言，外部系统的访问需要进行严格的安全控制。&lt;/p></description></item><item><title>微服务安全沉思录之二</title><link>https://hybridego.github.io/2018/05/23/service_2_service_auth/</link><pubDate>Wed, 23 May 2018 15:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/05/23/service_2_service_auth/</guid><description>&lt;h2 id="服务间认证与鉴权">服务间认证与鉴权&lt;/h2>
&lt;p>除来自用户的访问请求以外，微服务应用中的各个微服务相互之间还有大量的访问，包括下述场景：&lt;/p>
&lt;ul>
&lt;li>用户间接触发的微服务之间的相互访问&lt;BR>
例如在一个网上商店应用中，用户访问购物车微服务进行结算时，购物车微服务可能需要访问用户评级微服务获取用户的会员级别，以得到用户可以享受购物折扣。&lt;/li>
&lt;li>非用户触发的微服务之间的相互访问&lt;BR>
例如数据同步或者后台定时任务导致的微服务之间的相互访问。&lt;/li>
&lt;/ul>
&lt;p>根据应用系统的数据敏感程度的不同，对于系统内微服务的相互访问可能有不同的安全要求。&lt;/p></description></item><item><title>微服务安全沉思录之一</title><link>https://hybridego.github.io/2018/05/22/user_authentication_authorization/</link><pubDate>Wed, 23 May 2018 10:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/05/22/user_authentication_authorization/</guid><description>&lt;blockquote>
&lt;p>这段时间对之前微服务安全相关的一些想法进行了进一步总结和归纳，理清了在之前文章里面没有想得太清楚的地方，例如服务间的认证与鉴权以及用户身份在服务调用链中的传递。&lt;/p></description></item><item><title>Istio Sidecar自动注入原理</title><link>https://hybridego.github.io/2018/05/23/istio-auto-injection-with-webhook/</link><pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/05/23/istio-auto-injection-with-webhook/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;hr>
&lt;p>Kubernets 1.9版本引入了Admission Webhook(web 回调)扩展机制，通过Webhook,开发者可以非常灵活地对Kubernets API Server的功能进行扩展，在API Server创建资源时对资源进行验证或者修改。&lt;/p>
&lt;p>使用webhook的优势是不需要对API Server的源码进行修改和重新编译就可以扩展其功能。插入的逻辑实现为一个独立的web进程，通过参数方式传入到kubernets中，由kubernets在进行自身逻辑处理时对扩展逻辑进行回调。&lt;/p>
&lt;p>Istio 0.7版本就利用了Kubernets webhook实现了sidecar的自动注入。&lt;/p></description></item><item><title>使用Algolia为Gitpage博客提供站内搜索</title><link>https://hybridego.github.io/2018/05/21/algolia-integration-with-jekyll/</link><pubDate>Mon, 21 May 2018 11:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/05/21/algolia-integration-with-jekyll/</guid><description>&lt;blockquote>
&lt;p>This series of articles are my notes of &amp;ldquo;Bitcoin and Cryptocurrency Technologies&amp;rdquo; online course.&lt;/p>&lt;/blockquote>
&lt;h2 id="table-of-content">Table of Content&lt;/h2>
&lt;p>{:.no_toc}&lt;/p>
&lt;ul>
&lt;li>Table of Content
{:toc}&lt;/li>
&lt;/ul>
&lt;h2 id="scrooge-coin-transaction">Scrooge Coin Transaction&lt;/h2>
&lt;p>Scrooge Coin programming assignment is a little bit tricky, the video of this lesson hasn&amp;rsquo;t explained some implementation details. To help you understand the transaction data structure used in Scrooge Coin, I draw this diagram:

 &lt;img src="https://hybridego.github.io/img/2018-5-20-cryptocurrency_week1_scroogecoin/scroogecoin.png" alt="Scrooge Coin">

&lt;/p></description></item><item><title>川西秘境探险</title><link>https://hybridego.github.io/2018/05/01/may-day-jiulonghu/</link><pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/05/01/may-day-jiulonghu/</guid><description>&lt;h2 id="寻浮云牧场不遇">寻浮云牧场不遇&lt;/h2>
&lt;p>五一节前的一周内，几个朋友就纷纷坐不住了，一个二个不再安心上班，开始在微信群里讨论过节要到哪里耍。
大家思来想去，最后决定还是去理县方向。因为根据多年自驾的经验，只要出了汶川，沿途都是风景。&lt;/p></description></item><item><title>Helm介绍</title><link>https://hybridego.github.io/2018/04/16/using-helm-to-deploy-to-kubernetes/</link><pubDate>Mon, 16 Apr 2018 15:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/04/16/using-helm-to-deploy-to-kubernetes/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;hr>
&lt;p>Helm是Kubernetes生态系统中的一个软件包管理工具。本文将介绍为何要使用Helm进行Kubernetes软件包管理，澄清Helm中使用到的相关概念，并通过一个具体的示例学习如何使用Helm打包，分发，安装，升级及回退Kubernetes应用。&lt;/p></description></item><item><title>Service Mesh 和 API Gateway的关系探讨（译文）</title><link>https://hybridego.github.io/2018/04/11/service-mesh-vs-api-gateway/</link><pubDate>Wed, 11 Apr 2018 09:32:00 +0000</pubDate><guid>https://hybridego.github.io/2018/04/11/service-mesh-vs-api-gateway/</guid><description>&lt;h2 id="service-mesh-vs-api-gateway">Service Mesh vs API Gateway&lt;/h2>
&lt;p>在&lt;a href="https://medium.com/microservices-in-practice/service-mesh-for-microservices-2953109a3c9a">前一篇关于Service Mesh的文章&lt;/a>中,我提到了几个关于Service Mesh和API Gateway之间关系的问题，在本篇文章中，我打算就Service Mesh和API Gateway的用途进行进一步讨论。&lt;/p></description></item><item><title>谈谈微服务架构中的基础设施：Service Mesh与Istio</title><link>https://hybridego.github.io/2018/03/29/what-is-service-mesh-and-istio/</link><pubDate>Thu, 29 Mar 2018 12:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/03/29/what-is-service-mesh-and-istio/</guid><description>&lt;h2 id="微服务架构的演进">微服务架构的演进&lt;/h2>
&lt;p>作为一种架构模式，微服务将复杂系统切分为数十乃至上百个小服务，每个服务负责实现一个独立的业务逻辑。这些小服务易于被小型的软件工程师团队所理解和修改，并带来了语言和框架选择灵活性，缩短应用开发上线时间，可根据不同的工作负载和资源要求对服务进行独立缩扩容等优势。&lt;/p>
&lt;p>另一方面，当应用被拆分为多个微服务进程后，进程内的方法调用变成了了进程间的远程调用。引入了对大量服务的连接、管理和监控的复杂性。&lt;/p></description></item><item><title>如何配置docker使用HTTP代理</title><link>https://hybridego.github.io/2018/03/13/use-docker-behind-http-proxy/</link><pubDate>Tue, 13 Mar 2018 18:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/03/13/use-docker-behind-http-proxy/</guid><description>&lt;h2 id="ubuntu">Ubuntu&lt;/h2>
&lt;h3 id="设置docker使用http-proxy">设置docker使用http proxy&lt;/h3>
&lt;pre tabindex="0">&lt;code>sudo /etc/default/docker

export http_proxy=&amp;#34;http://127.0.0.1:3128/&amp;#34;
export https_proxy=&amp;#34;http://127.0.0.1:3128/&amp;#34;
export HTTP_PROXY=&amp;#34;http://127.0.0.1:3128/&amp;#34;
export HTTPS_PROXY=&amp;#34;http://127.0.0.1:3128/&amp;#34;
&lt;/code>&lt;/pre></description></item><item><title>Vim Tips</title><link>https://hybridego.github.io/2018/02/09/vim-tips/</link><pubDate>Fri, 09 Feb 2018 11:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/02/09/vim-tips/</guid><description>&lt;h2 id="vim-graphical-cheat-sheet">vim graphical cheat sheet&lt;/h2>
&lt;p>
 &lt;img src="//img/2018-02-09-vim-tips/vi-vim-cheat-sheet.svg" alt="">

&lt;/p></description></item><item><title>如何使用非root用户执行docker命令</title><link>https://hybridego.github.io/2018/02/09/docker-without-sudo/</link><pubDate>Fri, 09 Feb 2018 10:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/02/09/docker-without-sudo/</guid><description>&lt;h3 id="add-the-docker-group-if-it-doesnt-already-exist">Add the docker group if it doesn&amp;rsquo;t already exist:&lt;/h3>
&lt;p>sudo groupadd docker&lt;/p>
&lt;h3 id="add-the-connected-user-user-to-the-docker-group-change-the-user-name-to-match-your-preferred-user-if-you-do-not-want-to-use-your-current-user">Add the connected user &amp;ldquo;$USER&amp;rdquo; to the docker group. Change the user name to match your preferred user if you do not want to use your current user:&lt;/h3>
&lt;p>sudo gpasswd -a $USER docker&lt;/p>
&lt;h3 id="either-do-a-newgrp-docker-or-log-outin-to-activate-the-changes-to-groups">Either do a newgrp docker or log out/in to activate the changes to groups.&lt;/h3></description></item><item><title>안전한 마이크로서비스 애플리케이션을 구축하는 방법은?</title><link>https://hybridego.github.io/2018/05/22/user_authentication_authorization/</link><pubDate>Sat, 03 Feb 2018 12:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/05/22/user_authentication_authorization/</guid><description>&lt;h2 id="서론">서론&lt;/h2>
&lt;p>마이크로서비스 아키텍처의 도입은 소프트웨어 애플리케이션에 많은 이점을 가져다주었습니다: 소규모 개발팀, 개발 주기 단축, 언어 선택의 유연성, 서비스 확장성 향상 등. 동시에 분산 시스템의 복잡한 문제들도 함께 도입되었습니다. 그중 하나의 과제는 마이크로서비스 아키텍처에서 유연하고 안전하며 효율적인 인증 및 권한 부여 방안을 구현하는 것입니다. 이 글에서는 이 문제에 대해 비교적 완전한 논의를 시도할 것입니다.&lt;/p></description></item><item><title>Nginx 오픈소스 서비스 메시 컴포넌트 Nginmesh 설치 가이드</title><link>https://hybridego.github.io/2018/01/02/nginmesh-install/</link><pubDate>Tue, 02 Jan 2018 12:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/01/02/nginmesh-install/</guid><description>&lt;h2 id="서문">서문&lt;/h2>
&lt;p>Nginmesh는 Istio 서비스 메시 플랫폼의 데이터 플레인 프록시로 사용되는 NGINX의 오픈소스 서비스 메시 프로젝트입니다. 이는 7계층 로드 밸런싱 및 서비스 라우팅 기능을 제공하며, Istio와 사이드카로 통합되어 &amp;lsquo;표준적이고 안정적이며 안전한 방식&amp;rsquo;으로 서비스 간 통신을 용이하게 하는 것을 목표로 합니다. Nginmesh는 연말에 0.2 및 0.3 버전을 연속으로 출시하여 서비스 디스커버리, 요청 전달, 라우팅 규칙, 성능 지표 수집 등의 기능을 제공합니다.&lt;/p></description></item><item><title>Kubernetes 클러스터 외부에서 애플리케이션에 접근하는 방법은 무엇인가요?</title><link>https://hybridego.github.io/2017/11/28/access-application-from-outside/</link><pubDate>Tue, 28 Nov 2017 12:00:00 +0000</pubDate><guid>https://hybridego.github.io/2017/11/28/access-application-from-outside/</guid><description>&lt;h2 id="서론">서론&lt;/h2>
&lt;p>Kubernetes의 클러스터 네트워크는 사설 네트워크에 속하며, 배포된 애플리케이션은 클러스터 네트워크 내부에서만 접근할 수 있다는 것을 알고 있습니다. 그렇다면 Kubernetes 클러스터의 애플리케이션을 외부 네트워크에 노출하여 외부 사용자에게 서비스를 제공하는 방법은 무엇일까요? 이 글에서는 외부 네트워크에서 Kubernetes 클러스터의 애플리케이션에 접근하는 몇 가지 구현 방식을 탐구합니다.&lt;/p></description></item><item><title>Istio를 이용한 카나리 릴리스(Canary Release) 구현</title><link>https://hybridego.github.io/2017/11/08/istio-canary-release-ko/</link><pubDate>Wed, 08 Nov 2017 15:00:00 +0000</pubDate><guid>https://hybridego.github.io/2017/11/08/istio-canary-release-ko/</guid><description>&lt;h2 id="카나리-릴리스canary-release-소개">카나리 릴리스(Canary Release) 소개&lt;/h2>
&lt;p>애플리케이션이 출시된 후, 운영팀이 직면하는 큰 과제 중 하나는 기존 서비스에 영향을 주지 않으면서 업그레이드를 수행하는 방법입니다. 제품을 개발해 본 사람이라면 누구나 알겠지만, 출시 전에 아무리 완벽한 자동화 및 수동 테스트를 거쳤더라도 출시 후에는 크고 작은 문제가 발생하기 마련입니다. 머피의 법칙에 따르면, 잘못될 수 있는 버전 릴리스는 반드시 잘못됩니다.&lt;/p></description></item><item><title>Istio를 사용하여 애플리케이션 트래픽 전환 구현</title><link>https://hybridego.github.io/2017/11/07/istio-traffic-shifting/</link><pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2017/11/07/istio-traffic-shifting/</guid><description>&lt;p>Istio에 대한 더 많은 내용은 &lt;a href="http://istio.doczh.cn/">Istio 중국어 문서&lt;/a>를 참조하십시오.&lt;/p>
&lt;p>원문은 &lt;a href="https://istio.io/docs/tasks/traffic-management/traffic-shifting.html">Traffic Shifting&lt;/a>을 참조하십시오.&lt;/p>
&lt;p>이 작업은 애플리케이션 트래픽을 이전 버전의 서비스에서 새 버전으로 점진적으로 마이그레이션하는 방법을 보여줍니다. Istio를 통해 다양한 가중치 규칙(10%, 20%, ··· 100%)을 사용하여 트래픽을 이전 버전 서비스에서 새 버전 서비스로 원활하게 마이그레이션할 수 있습니다.&lt;/p></description></item><item><title>Istio 및 Bookinfo 예제 프로그램 설치 및 사용 후기</title><link>https://hybridego.github.io/2017/11/04/istio-install_and_example/</link><pubDate>Sat, 04 Nov 2017 12:00:00 +0000</pubDate><guid>https://hybridego.github.io/2017/11/04/istio-install_and_example/</guid><description>&lt;h2 id="서비스-메시-소개">서비스 메시 소개&lt;/h2>
&lt;p>&lt;strong>서비스 메시&lt;/strong>(Service Mesh)는 마이크로서비스 통신 및 관리를 해결하기 위해 등장한 &lt;strong>아키텍처 패턴&lt;/strong>입니다.&lt;/p>
&lt;p>서비스 메시는 서비스 간 통신 및 관련 관리 제어 기능을 비즈니스 프로그램에서 인프라 계층으로 이동시켜 비즈니스 로직과 서비스 통신이라는 두 가지 관심사를 완전히 분리합니다. 서비스 메시를 채택하면 애플리케이션 개발자는 애플리케이션 비즈니스 로직에만 집중하고 구현하면 됩니다. 서비스 간 통신(서비스 검색, 통신 신뢰성, 통신 보안, 서비스 라우팅 등)은 서비스 메시 계층에서 처리하며 애플리케이션에 투명하게 제공됩니다.&lt;/p></description></item><item><title>Welcome to Lionel Blog</title><link>https://hybridego.github.io/2017/11/03/hello-world/</link><pubDate>Sat, 04 Nov 2017 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2017/11/03/hello-world/</guid><description>&lt;blockquote>
&lt;p>“Yeah It&amp;rsquo;s on. ”&lt;/p>&lt;/blockquote>
&lt;h2 id="hello-world">Hello World!&lt;/h2></description></item><item><title/><link>https://hybridego.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/about/</guid><description>&lt;h2 id="about-me">About Me&lt;/h2>
&lt;p>&lt;strong>&lt;em>Huabing Zhao&lt;/em>&lt;/strong> is a software architect, an Istio Member and an ONAP PTL. He has a solid experience in the information and telecommunication technology industry for more than 17 years.&lt;/p>
&lt;p>Throughout his career, he has built a number of large-scale, cross-country software systems, most of them are still running in production.&lt;/p>
&lt;p>He loves open source and has been contributing to various open source projects, he is a member of Istio, previous PTL of ONAP, the author of the Hugo clean-white theme and the open source project Aeraki Mesh.&lt;/p></description></item><item><title/><link>https://hybridego.github.io/notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/notes/</guid><description>&lt;h2 id="go-语言学习笔记">&lt;a href="https://zhaohuabing.com/learning-golang">Go 语言学习笔记&lt;/a>&lt;/h2>
&lt;h2 id="envoy-学习笔记">&lt;a href="https://zhaohuabing.com/learning-envoy">Envoy 学习笔记&lt;/a>&lt;/h2></description></item><item><title/><link>https://hybridego.github.io/search/placeholder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/search/placeholder/</guid><description/></item><item><title>Posts Archive</title><link>https://hybridego.github.io/archive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/archive/</guid><description/></item></channel></rss>