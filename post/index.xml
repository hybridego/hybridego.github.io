<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Lionel Blog</title><link>https://hybridego.github.io/post/</link><description>Recent content in Posts on Lionel Blog</description><generator>Hugo</generator><language>ko-kr</language><lastBuildDate>Wed, 09 Jul 2025 15:13:23 +0900</lastBuildDate><atom:link href="https://hybridego.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Use do-while Loops in Shell Scripts</title><link>https://hybridego.github.io/2025/07/04/How_to_use_do_while_in_shell/</link><pubDate>Wed, 09 Jul 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/07/04/How_to_use_do_while_in_shell/</guid><description>&lt;h1 id="how-to-use-do-while-loops-in-shell-scripts">How to Use do-while Loops in Shell Scripts&lt;/h1>
&lt;h2 id="practical-examples-of-infinite-loops-in-bash">Practical Examples of Infinite Loops in Bash&lt;/h2>
&lt;h3 id="bash에서-do-while-패턴을-사용하여-무한-루프를-구현하고-시스템-정보를-주기적으로-확인하는-방법을-소개합니다">Bash에서 do-while 패턴을 사용하여 무한 루프를 구현하고, 시스템 정보를 주기적으로 확인하는 방법을 소개합니다.&lt;/h3>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">while true; do cat /sys/devices/platform/f01d0000.adc/iio:device0/in_voltage3_raw; sleep 1; done&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">while true; do cat /sys/devices/platform/f01d0000.adc/iio:device0/in_voltage3_raw; done&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">while true; do free -h; sleep 1; echo &amp;#34;---&amp;#34;; done&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>How to Check the C++ Version in Use</title><link>https://hybridego.github.io/2025/07/04/Cpp_version_check/</link><pubDate>Wed, 09 Jul 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/07/04/Cpp_version_check/</guid><description>&lt;h1 id="c-표준-버전-확인하기">C++ 표준 버전 확인하기&lt;/h1>
&lt;pre>&lt;code>g++ -std=c++14 -E -dM -x c++ /dev/null | grep '__cplusplus'
&lt;/code>&lt;/pre>
&lt;p>이 명령은 g++ 컴파일러가 인식하는 C++ 표준 버전을 확인하는 명령입니다. 각 옵션의 역할은 다음과 같습니다:&lt;/p>
&lt;ul>
&lt;li>g++: GNU C++ 컴파일러를 실행합니다.&lt;/li>
&lt;li>-std=c++14: C++14 표준을 사용하도록 지정합니다. 다른 버전(c++11, c++17 등)으로 변경할 수 있습니다.&lt;/li>
&lt;li>-E: 전처리 단계만 수행하고 결과를 출력합니다. 컴파일 과정은 생략됩니다.&lt;/li>
&lt;li>-dM: 전처리된 출력에서 매크로 정의만 포함하도록 지정합니다.&lt;/li>
&lt;li>-x c++: 입력 파일의 종류를 C++ 소스 코드로 간주합니다.&lt;/li>
&lt;li>/dev/null: 실제 소스 코드 파일 대신 null 디바이스를 사용합니다. 이는 컴파일러 자체에서 정의된 매크로를 확인하기 위함입니다.&lt;/li>
&lt;li>| grep &amp;lsquo;__cplusplus&amp;rsquo;: 전처리된 출력에서 __cplusplus 매크로를 검색하여 출력합니다.&lt;/li>
&lt;/ul>
&lt;p>__cplusplus 매크로는 컴파일러가 지원하는 C++ 표준 버전을 나타냅니다. 예를 들어, 출력이 201703L이면 C++17 표준을 지원함을 의미합니다.&lt;/p></description></item><item><title>High-Performance I/O in Unix Systems</title><link>https://hybridego.github.io/2025/07/04/High-Performance-IO-in-Unix-Systems/</link><pubDate>Fri, 04 Jul 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/07/04/High-Performance-IO-in-Unix-Systems/</guid><description>&lt;h1 id="고성능-io를-위한-유닉스-시스템-호출-가이드">고성능 I/O를 위한 유닉스 시스템 호출 가이드&lt;/h1>
&lt;p>유닉스 계열 운영 체제(리눅스, BSD 등)에서 고성능 I/O 작업은 대용량 데이터 전송, 네트워크 서버, 데이터 스트리밍 등에서 필수적입니다. 이번 포스팅에서는 &lt;code>readv()&lt;/code>, &lt;code>writev()&lt;/code>, &lt;code>splice()&lt;/code>, &lt;code>sendfile()&lt;/code>, &lt;code>funopen()&lt;/code>, &lt;code>sendmsg()&lt;/code>, &lt;code>io_uring&lt;/code>, 그리고 &lt;code>shm_open&lt;/code> 같은 함수들의 기능과 사용 예시를 정리하며, 리눅스와 BSD에서의 차이점을 살펴봅니다.&lt;/p></description></item><item><title>Buildroot Package version up</title><link>https://hybridego.github.io/2025/07/04/Buildroot-package-version-up/</link><pubDate>Fri, 04 Jul 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/07/04/Buildroot-package-version-up/</guid><description>&lt;h1 id="buildroot-version-변경하는-방법">buildroot version 변경하는 방법&lt;/h1>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">make nt98567_buildroot_defconfig&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">make clean
make &amp;lt;패키지이름&amp;gt;-rebuild&lt;/code>&lt;/pre>
&lt;/div>
&lt;ul>
&lt;li>패키지의 소스코드를 수정했다면, 캐시를 지우고 빌드해야 합니다&lt;/li>
&lt;/ul>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">make &amp;lt;패키지이름&amp;gt;-dirclean
make &amp;lt;패키지이름&amp;gt;&lt;/code>&lt;/pre>
&lt;/div>
&lt;ul>
&lt;li>packagename.mk 에 다음과 같이 써있으면 host 설정에 따르는 것임&lt;/li>
&lt;/ul>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">$(eval $(virtual-package))
$(eval $(host-virtual-package))&lt;/code>&lt;/pre>
&lt;/div>
&lt;ul>
&lt;li>&lt;strong>host package 의 버전 확인하기&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">pkg-config --modversion zlib&lt;/code>&lt;/pre>
&lt;/div>
&lt;h1 id="sha256-hash값-구하기">sha256 hash값 구하기&lt;/h1>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">sha256sum 파일이름&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>linux 에서 시스템 Buff and Cache 비우기</title><link>https://hybridego.github.io/2025/07/02/Empty-Buff-Cache/</link><pubDate>Wed, 02 Jul 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/07/02/Empty-Buff-Cache/</guid><description>&lt;h1 id="linux-에서-시스템-buff-and-cache-비우기">linux 에서 시스템 Buff and Cache 비우기&lt;/h1>
&lt;ul>
&lt;li>/proc/sys/vm/drop_caches 사용
리눅스 커널은 /proc/sys/vm/drop_caches 파일을 통해 캐시를 강제로 비울 수 있는 인터페이스를 제공합니다. 이 방법을 사용하려면 &lt;strong>루트 권한&lt;/strong>이 필요합니다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class=""># 캐시 비우기 (페이지 캐시만 비움)
echo 1 | tee /proc/sys/vm/drop_caches

# 덴트리(dentries)와 아이노드(inode) 캐시 비우기
echo 2 | tee /proc/sys/vm/drop_caches

# 페이지 캐시, 덴트리, 아이노드 모두 비우기 (가장 강력)
echo 3 | tee /proc/sys/vm/drop_caches&lt;/code>&lt;/pre>
&lt;/div>
&lt;ul>
&lt;li>강제로 비우는 대신, 큰 메모리를 사용하는 프로그램(예: stress 도구)을 실행해 시스템이 자연스럽게 buff/cache를 비우도록 유도할 수도 있습니다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">sudo apt install stress # 설치 (Ubuntu/Debian 기준)
stress --vm 1 --vm-bytes 200G # 200GB 메모리 사용 시뮬레이션&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>vscode remoteSSH용 docker 생성</title><link>https://hybridego.github.io/2025/06/18/VSCode-RemoteSSH-Docker/</link><pubDate>Wed, 18 Jun 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/06/18/VSCode-RemoteSSH-Docker/</guid><description>&lt;h1 id="vscode-remotessh용-docker-생성">vscode remoteSSH용 docker 생성&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>사용자에게 docker 권한 부여하기&lt;/p>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">sudo usermod -aG docker $USER
newgrp docker&lt;/code>&lt;/pre>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>Dockerfile 작성&lt;/p>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">FROM ubuntu:24.04

# Install required packages for minimal build environment and requested tools
RUN apt-get update &amp;amp;&amp;amp; \
 apt-get install -y \
 build-essential \
 cmake \
 clang-tidy \
 git \
 vim \
 sudo \
 zsh \
 openssh-server \
 locales &amp;amp;&amp;amp; \
 apt-get clean &amp;amp;&amp;amp; \
 rm -rf /var/lib/apt/lists/*

# Configure locale
RUN locale-gen en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8

# Create user and group (여기에서 1016 은 기존 서버의 userid 번호를 써줍니다.)
RUN groupadd -g 1016 lionelj &amp;amp;&amp;amp; \
 useradd -u 1016 -g 1016 -m -s /bin/zsh lionelj &amp;amp;&amp;amp; \
 usermod -aG sudo lionelj

# Configure SSH
RUN ssh-keygen -A &amp;amp;&amp;amp; \
 chmod 600 /etc/ssh/ssh_host_* &amp;amp;&amp;amp; \
 chown root:root /etc/ssh/ssh_host_* &amp;amp;&amp;amp; \
 mkdir -p /var/run/sshd &amp;amp;&amp;amp; \
 chmod 0755 /var/run/sshd &amp;amp;&amp;amp; \
 echo &amp;#34;lionelj ALL=(ALL) NOPASSWD:ALL&amp;#34; &amp;gt;&amp;gt; /etc/sudoers.d/lionelj &amp;amp;&amp;amp; \
 chmod 0440 /etc/sudoers.d/lionelj &amp;amp;&amp;amp; \
 sed -i &amp;#39;s/#Port 22/Port 2222/&amp;#39; /etc/ssh/sshd_config &amp;amp;&amp;amp; \
 echo &amp;#34;PasswordAuthentication yes&amp;#34; &amp;gt;&amp;gt; /etc/ssh/sshd_config &amp;amp;&amp;amp; \
 echo &amp;#39;lionelj:qwer&amp;#39; | chpasswd

# Expose SSH port
EXPOSE 2222

# Start SSH server in background and keep container running
RUN echo &amp;#39;#!/bin/bash\n\
 sudo /usr/sbin/sshd\n\
 if [ $? -ne 0 ]; then\n\
 echo &amp;#34;Failed to start sshd&amp;#34;\n\
 exit 1\n\
 fi\n\
 tail -f /dev/null&amp;#39; &amp;gt; /start.sh &amp;amp;&amp;amp; \
 chmod &amp;#43;x /start.sh

CMD [&amp;#34;/start.sh&amp;#34;]&lt;/code>&lt;/pre>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>docker build&lt;/p></description></item><item><title>Unicast, Broadcast, Multicast, SubnetMask</title><link>https://hybridego.github.io/2025/06/13/Unicast_Broadcast_Multicast_SubnetMask/</link><pubDate>Fri, 13 Jun 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/06/13/Unicast_Broadcast_Multicast_SubnetMask/</guid><description>&lt;h1 id="유니캐스트-브로드캐스트-멀티캐스트와-서브넷-마스크">유니캐스트, 브로드캐스트, 멀티캐스트와 서브넷 마스크&lt;/h1>
&lt;h2 id="1-유니캐스트와-멀티캐스트의-차이">1. 유니캐스트와 멀티캐스트의 차이&lt;/h2>
&lt;p>&lt;strong>유니캐스트(Unicast)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>1:1 통신 방식&lt;/strong>으로, 한 송신자가 한 수신자에게만 데이터를 전송합니다.&lt;/li>
&lt;li>예시: 웹서핑, 이메일 등 대부분의 인터넷 통신&lt;/li>
&lt;li>&lt;strong>장점:&lt;/strong> 신뢰성 있는 전송이 가능&lt;/li>
&lt;li>&lt;strong>단점:&lt;/strong> 여러 수신자에게 같은 데이터를 보내려면 각각 개별로 전송해야 하므로 네트워크 트래픽이 증가할 수 있음&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>멀티캐스트(Multicast)&lt;/strong>&lt;/p></description></item><item><title>SNMP</title><link>https://hybridego.github.io/2025/06/13/SNMP/</link><pubDate>Fri, 13 Jun 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/06/13/SNMP/</guid><description>&lt;h2 id="1-snmp-프로토콜로-할-수-있는-것은">1. SNMP 프로토콜로 할 수 있는 것은?&lt;/h2>
&lt;p>SNMP(Simple Network Management Protocol) 프로토콜을 사용하면 네트워크 관리자가 중앙에서 다양한 네트워크 장치(라우터, 스위치, 서버, 프린터 등)를 효과적으로 모니터링하고 관리할 수 있습니다. 구체적으로 SNMP로 할 수 있는 주요 기능은 다음과 같습니다.&lt;/p></description></item><item><title>Hugo install</title><link>https://hybridego.github.io/2025/06/13/Unicast_Broadcast_Multicast_SubnetMask/</link><pubDate>Fri, 13 Jun 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/06/13/Unicast_Broadcast_Multicast_SubnetMask/</guid><description>&lt;ol>
&lt;li>
&lt;p>hugo 설치
&lt;code>winget install Hugo.Hugo.Extended&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>hugo uninstall
&lt;code>winget uninstall --name &amp;quot;Hugo (Extended)&amp;quot;&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>site 만들기&lt;/p>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">PS D:\dev&amp;gt; hugo new site hybridego_playground
Congratulations! Your new Hugo site was created in D:\dev\hybridego_playground.

Just a few more steps...

1. Change the current directory to D:\dev\hybridego_playground.
2. Create or install a theme:
 - Create a new theme with the command &amp;#34;hugo new theme &amp;lt;THEMENAME&amp;gt;&amp;#34;
 - Or, install a theme from https://themes.gohugo.io/
1. Edit hugo.toml, setting the &amp;#34;theme&amp;#34; property to the theme name.
2. Create new content with the command &amp;#34;hugo new content &amp;lt;SECTIONNAME&amp;gt;\&amp;lt;FILENAME&amp;gt;.&amp;lt;FORMAT&amp;gt;&amp;#34;.
3. Start the embedded web server with the command &amp;#34;hugo server --buildDrafts&amp;#34;.

See documentation at https://gohugo.io/.&lt;/code>&lt;/pre>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>git 설정 및 테마 설정&lt;/p></description></item><item><title>Cargo troubleshooting</title><link>https://hybridego.github.io/2025/05/26/Cargo_troubleshooting/</link><pubDate>Mon, 26 May 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/05/26/Cargo_troubleshooting/</guid><description>&lt;h2 id="cargo-install-troubleshooting">Cargo install troubleshooting&lt;/h2>
&lt;p>cargo로 뭐 설치하려고 할 때&lt;/p>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">PS D:\dev\rust&amp;gt; rustup update
info: syncing channel updates for &amp;#39;stable-x86_64-pc-windows-msvc&amp;#39;
info: checking for self-update

 stable-x86_64-pc-windows-msvc unchanged - rustc 1.87.0 (17067e9ac 2025-05-09)

info: cleaning up downloads &amp;amp; tmp directories
PS D:\dev\rust&amp;gt; cargo install create-tauri-app --locked
 Updating crates.io index
warning: spurious network error (3 tries remaining): [35] SSL connect error (schannel: next InitializeSecurityContext failed: CRYPT_E_NO_REVOCATION_CHECK (0x80092012))
warning: spurious network error (2 tries remaining): [35] SSL connect error (schannel: next InitializeSecurityContext failed: CRYPT_E_NO_REVOCATION_CHECK (0x80092012))
warning: spurious network error (1 tries remaining): [35] SSL connect error (schannel: next InitializeSecurityContext failed: CRYPT_E_NO_REVOCATION_CHECK (0x80092012))
error: download of config.json failed

Caused by:
 failed to download from `https://index.crates.io/config.json`

Caused by:
 [35] SSL connect error (schannel: next InitializeSecurityContext failed: CRYPT_E_NO_REVOCATION_CHECK (0x80092012))&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>이런 에러가 발생한다면&lt;/p></description></item><item><title>Dioxus vs Tauri</title><link>https://hybridego.github.io/2025/05/26/Dioxus_vs_Tauri/</link><pubDate>Mon, 26 May 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/05/26/Dioxus_vs_Tauri/</guid><description>&lt;h1 id="dioxus와-tauri-비교">Dioxus와 Tauri 비교&lt;/h1>
&lt;h2 id="dioxus란">Dioxus란?&lt;/h2>
&lt;p>Dioxus는 Rust로 작성된 풀스택 UI 프레임워크로, React와 유사한 선언적 프로그래밍 모델을 제공합니다. 웹, 데스크톱, 모바일, 서버사이드 렌더링(SSR), LiveView 등 다양한 플랫폼을 단일 코드베이스로 지원합니다. Rust의 메모리 안전성과 성능을 활용하여 빠르고 안정적인 애플리케이션을 개발할 수 있도록 설계되었습니다. Dioxus는 가상 DOM(Virtual DOM)을 사용하여 UI를 효율적으로 관리하며, React의 컴포넌트 기반 아키텍처와 유사한 개발 경험을 제공합니다. 또한, HTML과 CSS를 적극 활용하며, Tailwind CSS와 같은 외부 CSS 라이브러리와의 통합도 지원합니다. 모바일 지원은 Tauri의 Tao와 Wry 라이브러리를 활용하며, 특히 데스크톱과 웹에서 강력한 성능을 발휘합니다.&lt;a href="https://dioxuslabs.com/blog/introducing-dioxus/">&lt;/a>&lt;a href="https://www.syntax-stories.com/2024/12/dioxus-framework.html">&lt;/a>&lt;/p></description></item><item><title>linux debugging</title><link>https://hybridego.github.io/2025/05/23/Linux_debugging_skil/</link><pubDate>Fri, 23 May 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/05/23/Linux_debugging_skil/</guid><description>&lt;h1 id="리눅스-환경에서의-메모리-디버깅-스킬">리눅스 환경에서의 메모리 디버깅 스킬&lt;/h1>
&lt;p>이 교육 자료는 리눅스 환경에서 메모리 관련 문제를 디버깅하는 데 필요한 핵심 개념과 도구를 다룹니다. 페이지, 페이지 폴트, 신호(SIGSEGV, SIGBUS), 댕글링 포인터, &lt;code>/proc&lt;/code> 파일, OOM Killer, Shadow Memory, LD_PRELOAD, RAII를 기반으로 디버깅 스킬을 정리했습니다.&lt;/p></description></item><item><title>Docker SSH tunneling</title><link>https://hybridego.github.io/2025/05/21/Docker_SSH_tunneling/</link><pubDate>Wed, 21 May 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/05/21/Docker_SSH_tunneling/</guid><description>&lt;h2 id="docker-와-ssh-터널링-설정">Docker 와 ssh 터널링 설정&lt;/h2>
&lt;ol>
&lt;li>처음 실행 (필요한 디렉토리 mount 하고 이미지와 shell 선택, user 지정)&lt;/li>
&lt;/ol>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">docker run -it \
 -v /home/lionelj:/home/lionelj \
 --name lj-ubuntu \
 -v /opt:/opt \
 ubuntu:24.04 \
 /bin/bash&lt;/code>&lt;/pre>
&lt;/div>
&lt;ol start="2">
&lt;li>Docker 에서 필요한 기본 설정&lt;/li>
&lt;/ol>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">apt-get update 
apt-get install -y sudo 
apt-get install -y vim git zsh
groupadd -g 1016 lionelj 
useradd -u 1016 -g 1016 -m -s /bin/zsh lionelj

usermod -aG sudo lionelj #사용자를 sudo 그룹에 추가. -a: 기존 그룹을 유지하면서 추가. -G sudo: sudo 그룹에 추가.

sudo apt-get install -y locales
sudo locale-gen en_US.UTF-8&lt;/code>&lt;/pre>
&lt;/div>
&lt;ol start="3">
&lt;li>다음부터는 만들어진 container로 접속&lt;/li>
&lt;/ol>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class=""># container name으로 접속
docker start lj-ubuntu
# container id로 접속
docker start 708d99e6c6b9

# start 후 shell로 접속
docker exec -it lj-ubuntu /bin/bash&lt;/code>&lt;/pre>
&lt;/div>
&lt;ol start="4">
&lt;li>컨테이너를 이미지로 만들기 (이렇게 하면 누적된 image를 다 유지해야 함. 중간 image 삭제 불가)&lt;/li>
&lt;/ol>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">docker commit &amp;lt;컨테이너_ID&amp;gt; my-ubuntu:custom

# ex)
$ docker commit 7a613f013271 lionel-ubuntu:custom
sha256:ec1a4af2f69aa0b7b9366279979d80b0cce02ffd2b3f1e07f81ded54875f7666

$ docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
lionel-ubuntu custom ec1a4af2f69a 6 seconds ago 235MB
ubuntu 24.04 602eb6fb314b 2 weeks ago 78.1MB&lt;/code>&lt;/pre>
&lt;/div>
&lt;ol start="5">
&lt;li>새로 만든 이미지로 컨테이너 띄우기&lt;/li>
&lt;/ol>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">$ docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
lionel-ubuntu 24.04 fa9ec891a58d 24 seconds ago 235MB
ubuntu 24.04 602eb6fb314b 2 weeks ago 78.1MB

docker run -it \
 -v /home/lionelj:/home/lionelj \
 --name lj-ubuntu \
 -v /opt:/opt \
 lionel-ubuntu:24.04 \
 /bin/bash&lt;/code>&lt;/pre>
&lt;/div>
&lt;ol start="6">
&lt;li>ssh 설정 (container에 접속해서 sshd를 띄운다.)&lt;/li>
&lt;/ol>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">mkdir /run/sshd 
/usr/sbin/sshd

# 컨테이너는 기본적으로 systemd를 사용하지 않으므로, systemctl 대신 직접 sshd를 실행.&lt;/code>&lt;/pre>
&lt;/div>
&lt;ol start="7">
&lt;li>ip 설정 (host 에서 docker container의 ip를 확인한다. ssh 터널링 설정을 해야 하기 때문)&lt;/li>
&lt;/ol>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">$ ip addr
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1
 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
 inet 127.0.0.1/8 scope host lo
 valid_lft forever preferred_lft forever
1839: eth0@if1840: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state UP group default
 link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0
 inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0 &amp;lt;&amp;lt;== 이 번호를 확인.
 valid_lft forever preferred_lft forever&lt;/code>&lt;/pre>
&lt;/div>
&lt;ul>
&lt;li>또 다른 ip 확인 방법 (host에서)&lt;/li>
&lt;/ul>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">$ docker inspect 85d05024ca50 | grep IPAddress
 &amp;#34;SecondaryIPAddresses&amp;#34;: null,
 &amp;#34;IPAddress&amp;#34;: &amp;#34;172.17.0.2&amp;#34;,
 &amp;#34;IPAddress&amp;#34;: &amp;#34;172.17.0.2&amp;#34;,&lt;/code>&lt;/pre>
&lt;/div>
&lt;ol start="8">
&lt;li>컨테이너 중지 및 삭제 후 포트 매핑 포함하여 재실행&lt;/li>
&lt;/ol>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">docker run -it --name lj-ubuntu \
 -v /home/lionelj:/home/lionelj \
 -v /opt:/opt \
 --user 1016:1016 \
 -p 2222:2222 \
 lj-ubuntu-3:24.04 \
 /bin/bash&lt;/code>&lt;/pre>
&lt;/div>
&lt;ol start="9">
&lt;li>이미지 이름 바꾸는 방법&lt;/li>
&lt;/ol>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">docker tag 원래_이미지_이름:태그 새_이미지_이름:태그
docker rmi 원래_이미지_이름:태그&lt;/code>&lt;/pre>
&lt;/div>
&lt;ul>
&lt;li>접속 하는 방법 ssh 터널링 (윈도우에서 설정.)&lt;/li>
&lt;/ul>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">ssh -L 2222:172.17.0.2:2222 lionelj@&amp;lt;호스트_IP&amp;gt;
ssh -L 2222:172.17.0.2:2222 lionelj@192.168.85.15&lt;/code>&lt;/pre>
&lt;/div>
&lt;ul>
&lt;li>Windows ssh 설정&lt;/li>
&lt;/ul>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">C:\Users\lionel.j\.ssh\config 파일을 열고

Host lj-ubuntu
  HostName localhost
  User lionelj
  Port 2222

이렇게 추가 후
vscode 에서 Remote-SSH: Connect to Host...로 lj-ubuntu 로 접속.&lt;/code>&lt;/pre>
&lt;/div>
&lt;hr>
&lt;h2 id="다음부터-사용할-때는-이렇게">다음부터 사용할 때는 이렇게&lt;/h2>
&lt;p>다 설정하면 이렇게 하면 됨.&lt;/p></description></item><item><title>Python uv</title><link>https://hybridego.github.io/2025/05/16/Python_uv/</link><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2025/05/16/Python_uv/</guid><description>&lt;h1 id="python-uv-사용법">Python UV 사용법&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>회사에서 uv python install 잘 안될 때
사용 중인 네트워크(예: 회사 네트워크)가 Zscaler, Cisco Umbrella 같은 프록시를 통해 SSL 검사를 수행하고 있을 가능성이 높습니다. 이 경우, 프록시가 중간에 자체 인증서를 삽입하여 uv가 사용하는 기본 인증서 저장소(Mozilla의 webpki-roots)에서 이를 신뢰하지 못해 UnknownIssuer 에러가 발생합니다.&lt;/p></description></item><item><title>Clean White Theme for Hugo</title><link>https://hybridego.github.io/post/readme/</link><pubDate>Wed, 09 Jan 2019 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/post/readme/</guid><description>&lt;h1 id="clean-white-theme-for-hugo">Clean White Theme for Hugo&lt;/h1>
&lt;p>CleanWhite is a clean, elegant, but fully functional blog theme for Hugo. Here is a live &lt;a href="https://zhaohuabing.com">demo site&lt;/a> using this theme.&lt;/p>
&lt;p>It is based on &lt;a href="https://github.com/Huxpro/huxpro.github.io">huxblog Jekyll Theme&lt;/a>
and &lt;a href="https://github.com/BlackrockDigital/startbootstrap-clean-blog-jekyll">Clean Blog Jekyll Theme&lt;/a>.&lt;/p>
&lt;p>These two upstream projects have done awesome jobs to create a blog theme, what I&amp;rsquo;m doing here is porting it to Hugo, of which I like the simplicity and the much faster compiling speed. Some other features which I think could be useful, such as site search with algolia and proxy for Disqus access in China, have also been built in the CleanWhite theme. Other fancy features of upstream projects are not supported by this Hugo theme, I&amp;rsquo;d like to make it as simple as possible and only focus on blog purpose, at least for now.
While I created this theme, I followed the Hugo theme best practice and tried to make every part of the template as a replaceable partial html, so it could be much easier for you to make your customization based on it.&lt;/p></description></item><item><title>Istio v1alpha3 라우팅 API 소개</title><link>https://hybridego.github.io/2018/06/04/introducing-the-istio-v1alpha3-routing-api/</link><pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/06/04/introducing-the-istio-v1alpha3-routing-api/</guid><description>&lt;p>지금까지 Istio는 RouteRule, DestinationPolicy, EgressRule, Ingress(Kubernetes의 Ingress 리소스를 직접 사용)의 네 가지 리소스를 포함하는 간단한 트래픽 관리 API를 제공했습니다. 이 API를 통해 사용자는 Istio 서비스 메시 내에서 트래픽을 쉽게 관리할 수 있습니다. 이 API를 통해 사용자는 요청을 특정 서비스 버전으로 라우팅하고, 복원력 테스트를 위해 지연 및 오류를 주입하고, 타임아웃 및 회로 차단기를 추가하는 등 애플리케이션 코드를 수정할 필요 없이 모든 작업을 수행할 수 있습니다.&lt;/p></description></item><item><title>Istio 0.8 릴리스 발표</title><link>https://hybridego.github.io/2018/06/02/istio08/</link><pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/06/02/istio08/</guid><description>&lt;blockquote>
&lt;p>6월 1일 아침, Istio 커뮤니티는 0.8 릴리스를 발표했습니다. 일반적인 버그 수정 및 성능 개선 외에, 이 어린이날 선물에는 어떤 기대할 만한 내용이 있을까요? 함께 살펴보겠습니다.&lt;/p>&lt;/blockquote></description></item><item><title>내 Ubuntu 데스크톱 설정에 대한 모든 것</title><link>https://hybridego.github.io/2018/05/24/set_up_my_ubuntu_desktop/</link><pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/05/24/set_up_my_ubuntu_desktop/</guid><description>&lt;h2 id="ssh-키-쌍-생성">SSH 키 쌍 생성&lt;/h2>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">ssh-keygen -C &amp;#34;hybridego@gmail.com&amp;#34;&lt;/code>&lt;/pre>
&lt;/div>
&lt;h2 id="shadowsocks">Shadowsocks&lt;/h2>
&lt;p>Shadowsocks 설치&lt;/p>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">sudo apt-get install python3-pip

sudo pip3 install shadowsocks&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>다음 내용을 포함하는 &lt;code>config/shadowsocks.json&lt;/code>에 구성 파일 생성:&lt;/p>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">{
	&amp;#34;server&amp;#34;:&amp;#34;remote-shadowsocks-server-ip-addr&amp;#34;,
	&amp;#34;server_port&amp;#34;:443,
	&amp;#34;local_address&amp;#34;:&amp;#34;127.0.0.1&amp;#34;,
	&amp;#34;local_port&amp;#34;:1080,
	&amp;#34;password&amp;#34;:&amp;#34;your-passwd&amp;#34;,
	&amp;#34;timeout&amp;#34;:300,
	&amp;#34;method&amp;#34;:&amp;#34;aes-256-cfb&amp;#34;,
	&amp;#34;fast_open&amp;#34;:false,
	&amp;#34;workers&amp;#34;:1
}&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>로컬 socks 프록시 시작&lt;/p></description></item><item><title>마이크로서비스 보안 성찰록 3부</title><link>https://hybridego.github.io/2018/05/23/external_system_auth/</link><pubDate>Wed, 23 May 2018 18:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/05/23/external_system_auth/</guid><description>&lt;h2 id="외부-시스템-접근-제어">외부 시스템 접근 제어&lt;/h2>
&lt;p>사용자 접근 및 마이크로서비스 간 상호 접근 외에도, 외부 타사 시스템도 시스템 내부의 마이크로서비스에 접근해야 할 수 있습니다. 예를 들어 이전 블로그의 온라인 상점 예시에서, 외부 추천 서비스가 상점의 상품 카탈로그 정보를 얻기 위해 시스템에 연결해야 할 수 있습니다. 내부 서비스 간의 접근과 비교하여 외부 시스템의 접근은 엄격한 보안 제어가 필요합니다.&lt;/p></description></item><item><title>마이크로서비스 보안 성찰록 2부</title><link>https://hybridego.github.io/2018/05/23/service_2_service_auth/</link><pubDate>Wed, 23 May 2018 15:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/05/23/service_2_service_auth/</guid><description>&lt;h2 id="서비스-간-인증-및-권한-부여">서비스 간 인증 및 권한 부여&lt;/h2>
&lt;p>사용자로부터의 접근 요청 외에도, 마이크로서비스 애플리케이션 내의 각 마이크로서비스는 서로 많은 접근을 합니다. 다음 시나리오를 포함합니다.&lt;/p>
&lt;ul>
&lt;li>사용자 간접적으로 트리거되는 마이크로서비스 간 상호 접근&lt;BR>
예를 들어 온라인 상점 애플리케이션에서 사용자가 장바구니 마이크로서비스에 접근하여 결제할 때, 장바구니 마이크로서비스는 사용자 등급 마이크로서비스에 접근하여 사용자의 회원 등급을 얻어 사용자가 받을 수 있는 쇼핑 할인을 확인해야 할 수 있습니다.&lt;/li>
&lt;li>사용자 트리거가 아닌 마이크로서비스 간 상호 접근&lt;BR>
예를 들어 데이터 동기화 또는 백그라운드 정기 작업으로 인한 마이크로서비스 간 상호 접근.&lt;/li>
&lt;/ul>
&lt;p>애플리케이션 시스템의 데이터 민감도에 따라 시스템 내 마이크로서비스 간 상호 접근에 대해 다른 보안 요구 사항이 있을 수 있습니다.&lt;/p></description></item><item><title>마이크로서비스 보안 성찰록 1부</title><link>https://hybridego.github.io/2018/05/22/user_authentication_authorization/</link><pubDate>Wed, 23 May 2018 10:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/05/22/user_authentication_authorization/</guid><description>&lt;blockquote>
&lt;p>최근 마이크로서비스 보안 관련 기존 아이디어를 추가로 요약하고 정리하여, 이전 글에서 명확하지 않았던 부분, 예를 들어 서비스 간 인증 및 권한 부여, 서비스 호출 체인에서 사용자 신원 전달 등을 명확히 했습니다.&lt;/p></description></item><item><title>Istio 사이드카 자동 주입 원리</title><link>https://hybridego.github.io/2018/05/23/istio-auto-injection-with-webhook/</link><pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/05/23/istio-auto-injection-with-webhook/</guid><description>&lt;h2 id="서론">서론&lt;/h2>
&lt;hr>
&lt;p>Kubernetes 1.9 버전은 Admission Webhook(웹 콜백) 확장 메커니즘을 도입했습니다. 웹훅을 통해 개발자는 Kubernetes API 서버의 기능을 매우 유연하게 확장하여 API 서버가 리소스를 생성할 때 리소스를 검증하거나 수정할 수 있습니다.&lt;/p>
&lt;p>웹훅 사용의 장점은 API 서버의 소스 코드를 수정하고 다시 컴파일할 필요 없이 기능을 확장할 수 있다는 것입니다. 삽입된 로직은 독립적인 웹 프로세스로 구현되며, 매개변수 방식으로 Kubernetes에 전달되어 Kubernetes가 자체 로직을 처리할 때 확장 로직을 콜백합니다.&lt;/p>
&lt;p>Istio 0.7 버전은 Kubernetes 웹훅을 활용하여 사이드카 자동 주입을 구현했습니다.&lt;/p></description></item><item><title>Algolia를 사용하여 Gitpage 블로그에 사이트 내 검색 기능 제공</title><link>https://hybridego.github.io/2018/05/21/algolia-integration-with-jekyll/</link><pubDate>Mon, 21 May 2018 11:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/05/21/algolia-integration-with-jekyll/</guid><description>&lt;blockquote>
&lt;p>이 일련의 기사는 &amp;ldquo;비트코인 및 암호화폐 기술&amp;rdquo; 온라인 강좌의 제 노트입니다.&lt;/p>&lt;/blockquote>
&lt;h2 id="목차">목차&lt;/h2>
&lt;p>{:.no_toc}&lt;/p>
&lt;ul>
&lt;li>목차
{:toc}&lt;/li>
&lt;/ul>
&lt;h2 id="스크루지-코인-거래">스크루지 코인 거래&lt;/h2>
&lt;p>스크루지 코인 프로그래밍 과제는 약간 까다롭습니다. 이 강의의 비디오는 일부 구현 세부 사항을 설명하지 않았습니다. 스크루지 코인에서 사용되는 거래 데이터 구조를 이해하는 데 도움이 되도록 이 다이어그램을 그렸습니다.

 &lt;img src="https://hybridego.github.io/img/2018-5-20-cryptocurrency_week1_scroogecoin/scroogecoin.png" alt="스크루지 코인">

&lt;/p></description></item><item><title>쓰촨 서부 비경 탐험</title><link>https://hybridego.github.io/2018/05/01/may-day-jiulonghu/</link><pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/05/01/may-day-jiulonghu/</guid><description>&lt;h2 id="부유운-목장을-찾았으나-만나지-못하다">부유운 목장을 찾았으나 만나지 못하다&lt;/h2>
&lt;p>5월 1일 연휴 전 일주일 동안 몇몇 친구들은 더 이상 앉아 있을 수 없었고, 하나둘씩 더 이상 일에 집중하지 못하고 위챗 그룹에서 연휴에 어디로 놀러 갈지 논의하기 시작했습니다.
모두가 고민 끝에 결국 리현 방향으로 가기로 결정했습니다. 수년간의 자율 여행 경험에 따르면, 원촨을 벗어나면 길을 따라 풍경이 펼쳐지기 때문입니다.&lt;/p></description></item><item><title>Helm을 사용하여 Kubernetes에 배포하는 방법</title><link>https://hybridego.github.io/2018/04/16/using-helm-to-deploy-to-kubernetes/</link><pubDate>Mon, 16 Apr 2018 10:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/04/16/using-helm-to-deploy-to-kubernetes/</guid><description>&lt;h2 id="helm이란">Helm이란?&lt;/h2>
&lt;p>Helm은 Kubernetes 애플리케이션을 관리하는 도구입니다. Helm은 Kubernetes 애플리케이션을 패키징하고 배포하는 데 사용됩니다. Helm은 Kubernetes 애플리케이션을 쉽게 설치, 업그레이드, 롤백할 수 있도록 도와줍니다.&lt;/p></description></item><item><title>서비스 메시 vs API 게이트웨이 관계 탐구 (번역)</title><link>https://hybridego.github.io/2018/04/11/service-mesh-vs-api-gateway-ko/</link><pubDate>Wed, 11 Apr 2018 09:32:00 +0000</pubDate><guid>https://hybridego.github.io/2018/04/11/service-mesh-vs-api-gateway-ko/</guid><description>&lt;h2 id="서비스-메시-vs-api-게이트웨이">서비스 메시 vs API 게이트웨이&lt;/h2>
&lt;p>&lt;a href="https://medium.com/microservices-in-practice/service-mesh-for-microservices-2953109a3c9a">이전 서비스 메시 관련 글&lt;/a>에서 저는 서비스 메시와 API 게이트웨이 간의 관계에 대한 몇 가지 질문을 언급했습니다. 이 글에서는 서비스 메시와 API 게이트웨이의 용도에 대해 더 자세히 논의할 예정입니다.&lt;/p></description></item><item><title>마이크로서비스 아키텍처의 인프라: 서비스 메시와 Istio에 대해 이야기하다</title><link>https://hybridego.github.io/2018/03/29/what-is-service-mesh-and-istio/</link><pubDate>Thu, 29 Mar 2018 12:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/03/29/what-is-service-mesh-and-istio/</guid><description>&lt;h2 id="마이크로서비스-아키텍처의-진화">마이크로서비스 아키텍처의 진화&lt;/h2>
&lt;p>아키텍처 패턴으로서 마이크로서비스는 복잡한 시스템을 수십에서 수백 개의 작은 서비스로 분할하며, 각 서비스는 독립적인 비즈니스 로직을 구현합니다. 이러한 작은 서비스는 소규모 소프트웨어 엔지니어링 팀이 이해하고 수정하기 쉽고, 언어 및 프레임워크 선택의 유연성을 제공하며, 애플리케이션 개발 및 출시 시간을 단축하고, 다양한 워크로드 및 리소스 요구 사항에 따라 서비스를 독립적으로 확장/축소할 수 있는 이점을 제공합니다.&lt;/p>
&lt;p>반면에 애플리케이션이 여러 마이크로서비스 프로세스로 분할되면 프로세스 내 메서드 호출이 프로세스 간 원격 호출로 변경됩니다. 이는 수많은 서비스의 연결, 관리 및 모니터링의 복잡성을 야기합니다.&lt;/p></description></item><item><title>HTTP 프록시 뒤에서 Docker를 사용하는 방법</title><link>https://hybridego.github.io/2018/03/13/use-docker-behind-http-proxy/</link><pubDate>Tue, 13 Mar 2018 18:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/03/13/use-docker-behind-http-proxy/</guid><description>&lt;h2 id="ubuntu">Ubuntu&lt;/h2>
&lt;h3 id="docker에서-http-프록시-설정">Docker에서 HTTP 프록시 설정&lt;/h3>
&lt;div class="highlight">
 &lt;div class="code-toolbar">
 &lt;button class="copy-code-button" title="Copy to clipboard">
 &lt;i class="fas fa-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 &lt;pre>&lt;code class="">sudo /etc/default/docker

export http_proxy=&amp;#34;http://127.0.0.1:3128/&amp;#34;
export https_proxy=&amp;#34;http://127.0.0.1:3128/&amp;#34;
export HTTP_PROXY=&amp;#34;http://127.0.0.1:3128/&amp;#34;
export HTTPS_PROXY=&amp;#34;http://127.0.0.1:3128/&amp;#34;&lt;/code>&lt;/pre>
&lt;/div></description></item><item><title>Vim 팁</title><link>https://hybridego.github.io/2018/02/09/vim-tips/</link><pubDate>Fri, 09 Feb 2018 11:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/02/09/vim-tips/</guid><description>&lt;h2 id="vim-그래픽-치트-시트">vim 그래픽 치트 시트&lt;/h2>
&lt;p>
 &lt;img src="//img/2018-02-09-vim-tips/vi-vim-cheat-sheet.svg" alt="">

&lt;/p></description></item><item><title>sudo 없이 Docker 명령을 실행하는 방법</title><link>https://hybridego.github.io/2018/02/09/docker-without-sudo/</link><pubDate>Fri, 09 Feb 2018 10:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/02/09/docker-without-sudo/</guid><description>&lt;h3 id="docker-그룹이-아직-존재하지-않으면-추가합니다">Docker 그룹이 아직 존재하지 않으면 추가합니다:&lt;/h3>
&lt;p>&lt;code>sudo groupadd docker&lt;/code>&lt;/p>
&lt;h3 id="연결된-사용자-user를-docker-그룹에-추가합니다-현재-사용자를-사용하지-않으려면-사용자-이름을-원하는-사용자와-일치하도록-변경하십시오">연결된 사용자 &amp;ldquo;$USER&amp;quot;를 docker 그룹에 추가합니다. 현재 사용자를 사용하지 않으려면 사용자 이름을 원하는 사용자와 일치하도록 변경하십시오:&lt;/h3>
&lt;p>&lt;code>sudo gpasswd -a $USER docker&lt;/code>&lt;/p></description></item><item><title>안전한 마이크로서비스 애플리케이션을 구축하는 방법은?</title><link>https://hybridego.github.io/2018/05/22/user_authentication_authorization/</link><pubDate>Sat, 03 Feb 2018 12:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/05/22/user_authentication_authorization/</guid><description>&lt;h2 id="서론">서론&lt;/h2>
&lt;p>마이크로서비스 아키텍처의 도입은 소프트웨어 애플리케이션에 많은 이점을 가져다주었습니다: 소규모 개발팀, 개발 주기 단축, 언어 선택의 유연성, 서비스 확장성 향상 등. 동시에 분산 시스템의 복잡한 문제들도 함께 도입되었습니다. 그중 하나의 과제는 마이크로서비스 아키텍처에서 유연하고 안전하며 효율적인 인증 및 권한 부여 방안을 구현하는 것입니다. 이 글에서는 이 문제에 대해 비교적 완전한 논의를 시도할 것입니다.&lt;/p></description></item><item><title>Nginx 오픈소스 서비스 메시 컴포넌트 Nginmesh 설치 가이드</title><link>https://hybridego.github.io/2018/01/02/nginmesh-install/</link><pubDate>Tue, 02 Jan 2018 12:00:00 +0000</pubDate><guid>https://hybridego.github.io/2018/01/02/nginmesh-install/</guid><description>&lt;h2 id="서문">서문&lt;/h2>
&lt;p>Nginmesh는 Istio 서비스 메시 플랫폼의 데이터 플레인 프록시로 사용되는 NGINX의 오픈소스 서비스 메시 프로젝트입니다. 이는 7계층 로드 밸런싱 및 서비스 라우팅 기능을 제공하며, Istio와 사이드카로 통합되어 &amp;lsquo;표준적이고 안정적이며 안전한 방식&amp;rsquo;으로 서비스 간 통신을 용이하게 하는 것을 목표로 합니다. Nginmesh는 연말에 0.2 및 0.3 버전을 연속으로 출시하여 서비스 디스커버리, 요청 전달, 라우팅 규칙, 성능 지표 수집 등의 기능을 제공합니다.&lt;/p></description></item><item><title>Kubernetes 클러스터 외부에서 애플리케이션에 접근하는 방법은 무엇인가요?</title><link>https://hybridego.github.io/2017/11/28/access-application-from-outside/</link><pubDate>Tue, 28 Nov 2017 12:00:00 +0000</pubDate><guid>https://hybridego.github.io/2017/11/28/access-application-from-outside/</guid><description>&lt;h2 id="서론">서론&lt;/h2>
&lt;p>Kubernetes의 클러스터 네트워크는 사설 네트워크에 속하며, 배포된 애플리케이션은 클러스터 네트워크 내부에서만 접근할 수 있다는 것을 알고 있습니다. 그렇다면 Kubernetes 클러스터의 애플리케이션을 외부 네트워크에 노출하여 외부 사용자에게 서비스를 제공하는 방법은 무엇일까요? 이 글에서는 외부 네트워크에서 Kubernetes 클러스터의 애플리케이션에 접근하는 몇 가지 구현 방식을 탐구합니다.&lt;/p></description></item><item><title>Istio를 이용한 카나리 릴리스(Canary Release) 구현</title><link>https://hybridego.github.io/2017/11/08/istio-canary-release-ko/</link><pubDate>Wed, 08 Nov 2017 15:00:00 +0000</pubDate><guid>https://hybridego.github.io/2017/11/08/istio-canary-release-ko/</guid><description>&lt;h2 id="카나리-릴리스canary-release-소개">카나리 릴리스(Canary Release) 소개&lt;/h2>
&lt;p>애플리케이션이 출시된 후, 운영팀이 직면하는 큰 과제 중 하나는 기존 서비스에 영향을 주지 않으면서 업그레이드를 수행하는 방법입니다. 제품을 개발해 본 사람이라면 누구나 알겠지만, 출시 전에 아무리 완벽한 자동화 및 수동 테스트를 거쳤더라도 출시 후에는 크고 작은 문제가 발생하기 마련입니다. 머피의 법칙에 따르면, 잘못될 수 있는 버전 릴리스는 반드시 잘못됩니다.&lt;/p></description></item><item><title>Istio를 사용하여 애플리케이션 트래픽 전환 구현</title><link>https://hybridego.github.io/2017/11/07/istio-traffic-shifting/</link><pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2017/11/07/istio-traffic-shifting/</guid><description>&lt;p>Istio에 대한 더 많은 내용은 &lt;a href="http://istio.doczh.cn/">Istio 중국어 문서&lt;/a>를 참조하십시오.&lt;/p>
&lt;p>원문은 &lt;a href="https://istio.io/docs/tasks/traffic-management/traffic-shifting.html">Traffic Shifting&lt;/a>을 참조하십시오.&lt;/p>
&lt;p>이 작업은 애플리케이션 트래픽을 이전 버전의 서비스에서 새 버전으로 점진적으로 마이그레이션하는 방법을 보여줍니다. Istio를 통해 다양한 가중치 규칙(10%, 20%, ··· 100%)을 사용하여 트래픽을 이전 버전 서비스에서 새 버전 서비스로 원활하게 마이그레이션할 수 있습니다.&lt;/p></description></item><item><title>Istio 및 Bookinfo 예제 프로그램 설치 및 사용 후기</title><link>https://hybridego.github.io/2017/11/04/istio-install_and_example/</link><pubDate>Sat, 04 Nov 2017 12:00:00 +0000</pubDate><guid>https://hybridego.github.io/2017/11/04/istio-install_and_example/</guid><description>&lt;h2 id="서비스-메시-소개">서비스 메시 소개&lt;/h2>
&lt;p>&lt;strong>서비스 메시&lt;/strong>(Service Mesh)는 마이크로서비스 통신 및 관리를 해결하기 위해 등장한 &lt;strong>아키텍처 패턴&lt;/strong>입니다.&lt;/p>
&lt;p>서비스 메시는 서비스 간 통신 및 관련 관리 제어 기능을 비즈니스 프로그램에서 인프라 계층으로 이동시켜 비즈니스 로직과 서비스 통신이라는 두 가지 관심사를 완전히 분리합니다. 서비스 메시를 채택하면 애플리케이션 개발자는 애플리케이션 비즈니스 로직에만 집중하고 구현하면 됩니다. 서비스 간 통신(서비스 검색, 통신 신뢰성, 통신 보안, 서비스 라우팅 등)은 서비스 메시 계층에서 처리하며 애플리케이션에 투명하게 제공됩니다.&lt;/p></description></item><item><title>Welcome to Lionel Blog</title><link>https://hybridego.github.io/2017/11/03/hello-world/</link><pubDate>Sat, 04 Nov 2017 00:00:00 +0000</pubDate><guid>https://hybridego.github.io/2017/11/03/hello-world/</guid><description>&lt;blockquote>
&lt;p>“Yeah It&amp;rsquo;s on. ”&lt;/p>&lt;/blockquote>
&lt;h2 id="hello-world">Hello World!&lt;/h2></description></item></channel></rss>